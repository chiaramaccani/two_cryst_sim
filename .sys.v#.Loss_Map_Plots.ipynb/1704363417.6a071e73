{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dc8890bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Packages pyspark or cern.nxcals are not installed. Data retrieval from NXCALS is not possible.\n",
      " If you are on SWAN and did not expect this warning, then restart and load the 'NXCals Pro' software stack.\n",
      "No pytransport functionality\n",
      "No pytransport functionality\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import os\n",
    "import subprocess\n",
    "\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import yaml\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "import lossmaps as lm\n",
    "import xobjects as xo\n",
    "\n",
    "import xtrack as xt\n",
    "import xcoll as xc\n",
    "\n",
    "import lossmaps as lm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6714695f",
   "metadata": {},
   "source": [
    "# Load"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4315dc95",
   "metadata": {},
   "outputs": [],
   "source": [
    "def retreive_lossmap_path(prefix_name, path = \"/eos/home-i04/c/cmaccani/xsuite_sim/two_cryst_sim/Condor/\"):\n",
    "\n",
    "    test_list = [path + i for i in os.listdir(path) if prefix_name in i]\n",
    "    for test_name in test_list:\n",
    "\n",
    "        n_jobs = int(subprocess.check_output(\"find \"+ test_name +\" -maxdepth 1 -mindepth 1 -type d | grep Job. | wc -l\", shell=True))\n",
    "\n",
    "        part_dfs =[]\n",
    "\n",
    "        for i in range(n_jobs):\n",
    "            file_path_part = (subprocess.check_output(\"echo \" + test_name + '/Job.' + str(i) + '/Outputdata/lossmap*', shell=True)).decode('ascii').strip()\n",
    "            if os.path.exists(file_path_part):\n",
    "                part_dfs.append(file_path_part)\n",
    "\n",
    "        n_jobs_verify  = len(part_dfs)\n",
    "        if n_jobs != n_jobs_verify:\n",
    "            print(\"!!! Succesful Jobs: \", n_jobs_verify_TARGET, '/', n_jobs, ' in file: ', test_name)\n",
    "    return part_dfs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f9a17302",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_7.7__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_8.2__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_8.7__target_absorber_20231222-1830\r\n",
      "TEST_IR7rem_TCCS_7.2__target_absorber_20231222-1824\r\n",
      "TEST_IR7rem_TCCS_7.7__target_absorber_20231222-1825\r\n",
      "TEST_IR7rem_TCCS_8.2__target_absorber_20231222-1826\r\n",
      "TEST_IR7rem_TCCS_8.7__target_absorber_20231222-1826\r\n",
      "TEST_NEW_SETUP__xsuite_20231215-2005\r\n"
     ]
    }
   ],
   "source": [
    "!ls /eos/home-i04/c/cmaccani/xsuite_sim/two_cryst_sim/Condor/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2525d6a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "prefix_name = 'TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20231222-1829'\n",
    "#prefix_name =  'TEST_B2V_align_test_CRY5.0_15_'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a827e4da",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_list = retreive_lossmap_path(prefix_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4e89da66",
   "metadata": {},
   "outputs": [],
   "source": [
    "ThisLM = lm.SimulatedLossMap(lmtype=lm.LMType.B2V, machine=lm.Machine.LHC)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fc309de6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#ThisLM.load_data_json(json_files=losses_json)\n",
    "ThisLM.load_data_json(json_files=test_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ece336ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pymadx.Tfs.Load> normal file\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<Figure size 1440x864 with 3 Axes>,\n",
       " array([<Axes: xlabel='s [m]', ylabel='Norm. inefficiency [1/m]'>,\n",
       "        <Axes: >,\n",
       "        <Axes: xlabel='s [m]', ylabel='Norm. inefficiency [1/m]'>],\n",
       "       dtype=object))"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x864 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lm.plot_lossmap(ThisLM, zoom=True, layout=\"./input_files/layout_flat_top_b2.tfs\",  outfile = \"./Outputdata/TEST_False2.png\")  #, outfile = \"./Outputdata/Lossmap_outputs/\"+outfile_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "49dc9b99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "36b0fbaa6caa4f059fbbeccbd09e221a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Box(children=(Dropdown(description='norm', index=3, options=('none', 'max', 'coll_max', 'total'), value='total…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "239629bf0f1d43be8de385f3f2bb1121",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FigureWidget({\n",
       "    'data': [{'base': 1e-17,\n",
       "              'hovertemplate': 'S=%{x:.2f} m, value=%{y:1.2e}<br>%{hovertext}',\n",
       "              'hovertext': array([   0.,    8.,    9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,\n",
       "                                    17.,   18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   26.,\n",
       "                                    27.,   28.,   29.,   30.,   31.,   32.,   33.,   34.,   35.,   36.,\n",
       "                                    37.,   38.,   39.,   40.,   41.,   42.,   43.,   44.,   45.,   46.,\n",
       "                                    47.,   48.,   49.,   50.,   51.,   52.,   53.,   54.,   55.,   56.,\n",
       "                                    57.,   58.,   59.,   60.,   61.,   62.,   63.,   64.,   65.,   66.,\n",
       "                                    67.,   68.,   69.,   70.,   71.,   72.,   73.,   74.,   75.,   76.,\n",
       "                                    77.,   78.,   79.,   80.,   81.,   82.,   83.,   84.,   87.,   88.,\n",
       "                                    89.,   90.,   92.,   93.,   97.,   98.,   99.,  100.,  101.,  102.,\n",
       "                                   103.,  104., 1012., 1015., 1016., 1021.]),\n",
       "              'marker': {'color': 'red', 'line': {'color': 'red', 'width': 1.5}},\n",
       "              'name': 'Warm',\n",
       "              'type': 'bar',\n",
       "              'uid': '0f107248-bc03-4b13-828f-361ceebca67c',\n",
       "              'width': 0.8,\n",
       "              'x': array([ 3181.55,  6520.65,  6521.45,  6521.55,  6521.75,  6521.85,  6521.95,\n",
       "                           6522.85,  6523.45,  6524.15,  6527.05,  6527.75,  6527.95,  6529.75,\n",
       "                           6531.15,  6531.65,  6531.75,  6531.85,  6531.95,  6532.05,  6533.05,\n",
       "                           6533.15,  6533.25,  6533.55,  6533.65,  6533.85,  6533.95,  6534.05,\n",
       "                           6534.75,  6534.85,  6534.95,  6535.05,  6535.25,  6535.55,  6535.75,\n",
       "                           6536.65,  6536.75,  6536.95,  6537.45,  6537.55,  6537.85,  6538.05,\n",
       "                           6538.15,  6538.25,  6538.55,  6538.65,  6538.75,  6538.95,  6539.15,\n",
       "                           6539.35,  6539.55,  6539.65,  6540.65,  6540.75,  6540.85,  6540.95,\n",
       "                           6541.05,  6541.15,  6541.25,  6541.35,  6541.45,  6541.65,  6541.75,\n",
       "                           6541.85,  6541.95,  6542.05,  6542.15,  6542.25,  6542.35,  6542.45,\n",
       "                           6542.55,  6542.65,  6542.75,  6542.95,  6543.05,  6543.15,  6543.25,\n",
       "                           6543.35,  6578.75,  6579.65,  6581.15,  6582.75,  6591.45,  6606.35,\n",
       "                           6743.15,  6744.95,  6745.25,  6745.95,  6746.75,  6749.55,  6750.45,\n",
       "                           6750.55, 16924.75, 19788.55, 19791.15, 20016.75]),\n",
       "              'xaxis': 'x2',\n",
       "              'y': array([2.37125733e-06, 1.18562866e-05, 1.18562866e-06, 1.18562866e-06,\n",
       "                          3.55688599e-06, 1.18562866e-06, 1.18562866e-06, 1.18562866e-06,\n",
       "                          1.18562866e-06, 2.37125733e-06, 1.18562866e-06, 1.18562866e-06,\n",
       "                          2.37125733e-06, 1.18562866e-06, 1.18562866e-06, 1.18562866e-06,\n",
       "                          2.37125733e-06, 1.18562866e-06, 1.18562866e-06, 1.18562866e-06,\n",
       "                          3.55688599e-06, 1.18562866e-06, 2.37125733e-06, 1.18562866e-06,\n",
       "                          1.18562866e-06, 2.37125733e-06, 1.18562866e-06, 2.37125733e-06,\n",
       "                          2.37125733e-06, 1.18562866e-06, 1.18562866e-06, 1.18562866e-06,\n",
       "                          1.18562866e-06, 1.77844299e-05, 3.55688599e-06, 2.37125733e-06,\n",
       "                          3.55688599e-06, 2.37125733e-06, 3.55688599e-06, 1.18562866e-06,\n",
       "                          1.18562866e-06, 1.18562866e-06, 1.18562866e-06, 2.37125733e-06,\n",
       "                          1.18562866e-06, 2.37125733e-06, 5.92814331e-06, 1.18562866e-06,\n",
       "                          1.18562866e-06, 1.89700586e-05, 2.37125733e-06, 4.74251465e-06,\n",
       "                          5.92814331e-06, 3.55688599e-06, 1.18562866e-06, 1.18562866e-06,\n",
       "                          3.55688599e-06, 5.92814331e-06, 1.18562866e-06, 4.74251465e-06,\n",
       "                          2.37125733e-06, 1.18562866e-06, 3.55688599e-06, 3.55688599e-06,\n",
       "                          5.92814331e-06, 5.92814331e-06, 3.55688599e-06, 1.18562866e-06,\n",
       "                          1.18562866e-06, 3.55688599e-06, 7.11377198e-06, 7.11377198e-06,\n",
       "                          2.37125733e-06, 4.74251465e-06, 4.74251465e-06, 4.86107752e-05,\n",
       "                          8.29940064e-06, 7.11377198e-06, 3.55688599e-06, 1.18562866e-06,\n",
       "                          1.18562866e-06, 1.18562866e-06, 2.37125733e-06, 1.18562866e-06,\n",
       "                          2.37125733e-06, 1.18562866e-06, 1.18562866e-06, 1.18562866e-06,\n",
       "                          2.37125733e-06, 1.18562866e-06, 1.18562866e-06, 2.37125733e-06,\n",
       "                          3.55688599e-06, 1.18562866e-06, 1.18562866e-06, 1.18562866e-06]),\n",
       "              'yaxis': 'y2'},\n",
       "             {'base': 1e-17,\n",
       "              'hovertemplate': 'S=%{x:.2f} m, value=%{y:1.2e}<br>%{hovertext}',\n",
       "              'hovertext': array([1.000e+00, 1.140e+02, 1.150e+02, ..., 1.033e+03, 1.034e+03, 1.035e+03]),\n",
       "              'marker': {'color': 'blue', 'line': {'color': 'blue', 'width': 1.5}},\n",
       "              'name': 'Cold',\n",
       "              'type': 'bar',\n",
       "              'uid': 'a1b2417a-6723-4899-b353-be8c1bf9e253',\n",
       "              'width': 0.8,\n",
       "              'x': array([ 3191.35,  6960.05,  6962.45, ..., 20404.25, 20532.85, 23710.35]),\n",
       "              'xaxis': 'x2',\n",
       "              'y': array([1.18562866e-06, 1.18562866e-06, 1.18562866e-06, ..., 1.18562866e-06,\n",
       "                          1.18562866e-06, 1.18562866e-06]),\n",
       "              'yaxis': 'y2'},\n",
       "             {'base': 1e-17,\n",
       "              'hovertemplate': 'S=%{x:.2f} m, value=%{y:1.2e}<br>%{hovertext}',\n",
       "              'hovertext': array(['TCTPH.4R8.B2', 'TCTPV.4R8.B2', 'TCP.D6R7.B2', 'TCP.C6R7.B2',\n",
       "                                  'TCP.B6R7.B2', 'TCSG.A6R7.B2', 'TCSG.B5R7.B2', 'TCSG.A5R7.B2',\n",
       "                                  'TCSG.D4R7.B2', 'TCSPM.B4R7.B2', 'TCSG.A4R7.B2', 'TCSG.A4L7.B2',\n",
       "                                  'TCSG.B5L7.B2', 'TCSG.D5L7.B2', 'TCSPM.E5L7.B2', 'TCSPM.6L7.B2',\n",
       "                                  'TCLA.A6L7.B2', 'TCLA.B6L7.B2', 'TCLA.C6L7.B2', 'TCLA.D6L7.B2',\n",
       "                                  'TCLA.A7L7.B2', 'TCLD.9L7.B2', 'TCDQA.A4L6.B2', 'TCDQA.C4L6.B2',\n",
       "                                  'TCDQA.B4L6.B2', 'TCSP.A4L6.B2', 'TCTPH.6R5.B2', 'TCTPV.6R5.B2',\n",
       "                                  'TCTPXH.4R5.B2', 'TCTPXV.4R5.B2', 'TCL.5L5.B2', 'TCL.6L5.B2',\n",
       "                                  'TCP.6R3.B2', 'TCSG.5R3.B2', 'TCCS.5R3.B2', 'TARGET.4L3.B2',\n",
       "                                  'TCSG.4L3.B2', 'TCSG.A5L3.B2', 'TCSG.B5L3.B2', 'TCLA.A5L3.B2',\n",
       "                                  'TCLA.7L3.B2', 'TCTPH.6R1.B2', 'TCTPV.6R1.B2', 'TCTPXH.4R1.B2',\n",
       "                                  'TCTPXV.4R1.B2'], dtype=object),\n",
       "              'marker': {'color': 'black', 'line': {'color': 'black', 'width': 1.5}},\n",
       "              'name': 'Collimator',\n",
       "              'type': 'bar',\n",
       "              'uid': '09757339-074f-49dd-b155-9bf8cfbb7052',\n",
       "              'width': 0.8,\n",
       "              'x': array([ 3225.42358362,  3227.42358287,  6459.7427983 ,  6461.7427983 ,\n",
       "                           6463.7427983 ,  6503.23729629,  6562.46479629,  6566.46479629,\n",
       "                           6587.79479629,  6655.72079629,  6657.72079629,  6673.72079629,\n",
       "                           6756.97679629,  6772.97679629,  6778.97679629,  6813.58179629,\n",
       "                           6818.64779629,  6849.52179565,  6882.79079398,  6884.79079398,\n",
       "                           6902.41879398,  6980.51855724, 10140.24501024, 10143.79501024,\n",
       "                          10147.34501024, 10151.25501024, 13112.93222662, 13114.93222662,\n",
       "                          13195.26122662, 13196.79972662, 13528.30322662, 13549.84222662,\n",
       "                          19817.11287817, 19850.43437597, 19885.18317149, 20005.54567149,\n",
       "                          20037.01737597, 20048.36237597, 20054.18237597, 20084.66237597,\n",
       "                          20244.61737292, 26443.13317149, 26445.13317149, 26524.85517149,\n",
       "                          26526.39367149]),\n",
       "              'xaxis': 'x2',\n",
       "              'y': array([8.29940064e-07, 1.30419153e-06, 1.35397548e+00, 1.14642388e-02,\n",
       "                          4.30636139e-02, 1.77048743e-02, 4.71350232e-02, 4.15208343e-02,\n",
       "                          3.41793031e-03, 4.63047274e-03, 8.93264491e-03, 5.46859365e-03,\n",
       "                          3.88281531e-03, 4.38137216e-03, 1.11733645e-03, 1.26032327e-04,\n",
       "                          1.12614567e-02, 4.38682605e-06, 6.88850253e-05, 8.03856234e-05,\n",
       "                          1.58281427e-04, 4.94011943e-06, 1.87724538e-05, 1.97604777e-07,\n",
       "                          3.16167643e-07, 2.25269446e-06, 9.48502930e-07, 3.78938777e-03,\n",
       "                          3.55688599e-07, 6.35496963e-05, 1.18562866e-07, 1.54131726e-06,\n",
       "                          3.94419135e-04, 5.77401159e-05, 1.34865260e-02, 4.26826319e-04,\n",
       "                          1.77844299e-05, 2.48982019e-05, 3.08263452e-05, 6.04670618e-05,\n",
       "                          3.55688599e-07, 1.03742508e-04, 6.17712533e-05, 2.01556873e-06,\n",
       "                          2.37125733e-06]),\n",
       "              'yaxis': 'y2'},\n",
       "             {'base': array([-1.0, -2.0, 0.0, ..., -2.0, 0.0, -1.0], dtype=object),\n",
       "              'hovertemplate': '%{hovertext}<br>S=%{x:.2f} m<extra></extra>',\n",
       "              'hovertext': array(['TAS.1R1', 'MQXA.1R1', 'MQXB.A2R1', ..., 'MQXB.A2L1', 'MQXA.1L1',\n",
       "                                  'TAS.1L1'], dtype=object),\n",
       "              'marker': {'color': array(['black', '#d10000', '#d10000', ..., '#d10000', '#d10000', 'black'],\n",
       "                                        dtype=object),\n",
       "                         'line': {'color': array(['black', '#d10000', '#d10000', ..., '#d10000', '#d10000', 'black'],\n",
       "                                                 dtype=object),\n",
       "                                  'width': 0.5}},\n",
       "              'showlegend': False,\n",
       "              'type': 'bar',\n",
       "              'uid': 'e3f09c49-bbd2-4978-a70e-afccfde6447c',\n",
       "              'width': array([1.8 , 6.37, 5.5 , ..., 5.5 , 6.37, 1.8 ]),\n",
       "              'x': array([1.99500000e+01, 2.61500000e+01, 3.48000000e+01, ..., 2.66240832e+04,\n",
       "                          2.66327332e+04, 2.66389042e+04]),\n",
       "              'xaxis': 'x',\n",
       "              'y': array([2., 2., 2., ..., 2., 2., 2.]),\n",
       "              'yaxis': 'y'},\n",
       "             {'line': {'color': 'gray', 'width': 0.5},\n",
       "              'mode': 'lines',\n",
       "              'showlegend': False,\n",
       "              'type': 'scatter',\n",
       "              'uid': 'b1c9608e-9097-4a5d-b469-e6289df030f8',\n",
       "              'x': [20.85, 26639.8042],\n",
       "              'xaxis': 'x',\n",
       "              'y': [0, 0],\n",
       "              'yaxis': 'y'}],\n",
       "    'layout': {'hovermode': 'closest',\n",
       "               'margin': {'b': 20, 'l': 20, 'r': 20, 't': 30},\n",
       "               'template': '...',\n",
       "               'xaxis': {'anchor': 'y',\n",
       "                         'domain': [0.0, 1.0],\n",
       "                         'matches': 'x2',\n",
       "                         'range': [0, 26658.8832],\n",
       "                         'showgrid': False,\n",
       "                         'showline': False,\n",
       "                         'showticklabels': False,\n",
       "                         'ticks': ''},\n",
       "               'xaxis2': {'anchor': 'y2',\n",
       "                          'domain': [0.0, 1.0],\n",
       "                          'exponentformat': 'none',\n",
       "                          'mirror': True,\n",
       "                          'range': [0, 26658.8832],\n",
       "                          'title': {'text': 'S [m]'}},\n",
       "               'yaxis': {'anchor': 'x',\n",
       "                         'domain': [0.8938775510204082, 1.0],\n",
       "                         'fixedrange': True,\n",
       "                         'showgrid': False,\n",
       "                         'showline': False,\n",
       "                         'showticklabels': False,\n",
       "                         'ticks': '',\n",
       "                         'zeroline': False},\n",
       "               'yaxis2': {'anchor': 'x2',\n",
       "                          'domain': [0.0, 0.8510204081632654],\n",
       "                          'exponentformat': 'e',\n",
       "                          'mirror': True,\n",
       "                          'range': [-7.0, 0.9542425094393249],\n",
       "                          'showexponent': 'all',\n",
       "                          'showgrid': True,\n",
       "                          'title': {'text': 'Norm. inefficiency [arb. unit]'},\n",
       "                          'type': 'log'}}\n",
       "})"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.plot_lossmap_interactive(ThisLM, norm='total', layout=\"./input_files/layout_flat_top_b2.tfs\")  #"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e36c0fb3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>s</th>\n",
       "      <th>name</th>\n",
       "      <th>length</th>\n",
       "      <th>losses_type</th>\n",
       "      <th>losses_N</th>\n",
       "      <th>losses_dE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1025</th>\n",
       "      <td>20084.662376</td>\n",
       "      <td>tcla.a5l3.b2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>510.0</td>\n",
       "      <td>510.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 s          name  length  losses_type  losses_N  losses_dE\n",
       "1025  20084.662376  tcla.a5l3.b2     1.0  Losses.COLL     510.0      510.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "losses_df = ThisLM._losses\n",
    "losses_df[losses_df['name']=='tcla.a5l3.b2']\n",
    "\n",
    "#'target.4l3.b2'\n",
    "\n",
    "#loss_tcp = int(losses_df[losses_df['name']=='tcp.d6r7.b2']['losses'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb047b90",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94a15c10",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "sparkconnect": {
   "bundled_options": [
    "NXCALS"
   ],
   "list_of_options": []
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
