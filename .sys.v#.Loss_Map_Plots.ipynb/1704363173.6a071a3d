{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dc8890bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Packages pyspark or cern.nxcals are not installed. Data retrieval from NXCALS is not possible.\n",
      " If you are on SWAN and did not expect this warning, then restart and load the 'NXCals Pro' software stack.\n",
      "No pytransport functionality\n",
      "No pytransport functionality\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import os\n",
    "import subprocess\n",
    "\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import yaml\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "import lossmaps as lm\n",
    "import xobjects as xo\n",
    "\n",
    "import xtrack as xt\n",
    "import xcoll as xc\n",
    "\n",
    "import lossmaps as lm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6714695f",
   "metadata": {},
   "source": [
    "# Load"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b96fe1a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def retreive_lossmap_path(prefix_name, path = \"/eos/home-i04/c/cmaccani/xsuite_sim/two_cryst_sim/Condor/\"):\n",
    "\n",
    "    test_list = [path + i for i in os.listdir(path) if prefix_name in i]\n",
    "    for test_name in test_list:\n",
    "\n",
    "        n_jobs = int(subprocess.check_output(\"find \"+ test_name +\" -maxdepth 1 -mindepth 1 -type d | grep Job. | wc -l\", shell=True))\n",
    "\n",
    "        part_dfs =[]\n",
    "\n",
    "        for i in range(n_jobs):\n",
    "            file_path_part = (subprocess.check_output(\"echo \" + test_name + '/Job.' + str(i) + '/Outputdata/lossmap*', shell=True)).decode('ascii').strip()\n",
    "            if os.path.exists(file_path_part):\n",
    "                part_dfs.append(file_path_part)\n",
    "\n",
    "        n_jobs_verify  = len(part_dfs)\n",
    "        if n_jobs != n_jobs_verify:\n",
    "            print(\"!!! Succesful Jobs: \", n_jobs_verify_TARGET, '/', n_jobs, ' in file: ', test_name)\n",
    "    return part_dfs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f9a17302",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_7.7__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_8.2__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_8.7__target_absorber_20231222-1830\r\n",
      "TEST_IR7rem_TCCS_7.2__target_absorber_20231222-1824\r\n",
      "TEST_IR7rem_TCCS_7.7__target_absorber_20231222-1825\r\n",
      "TEST_IR7rem_TCCS_8.2__target_absorber_20231222-1826\r\n",
      "TEST_IR7rem_TCCS_8.7__target_absorber_20231222-1826\r\n",
      "TEST_NEW_SETUP__xsuite_20231215-2005\r\n"
     ]
    }
   ],
   "source": [
    "!ls /eos/home-i04/c/cmaccani/xsuite_sim/two_cryst_sim/Condor/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2525d6a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "prefix_name = 'TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20231222-1829.0'\n",
    "#prefix_name =  'TEST_B2V_align_test_CRY5.0_15_'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a827e4da",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_list = [path + i for i in os.listdir(path) if prefix_name in i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e07b9b38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-10__20231121-1501',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-9__20231121-1501',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-8__20231121-1502',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-7__20231121-1502',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-6__20231121-1503',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-5__20231121-1503',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-4__20231121-1504',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-3__20231121-1505',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-2__20231121-1505',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-1__20231121-1506',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_0__20231121-1506',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_1__20231121-1507',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_2__20231121-1507',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_3__20231121-1508',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_4__20231121-1508',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_5__20231121-1508',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_6__20231121-1509',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_7__20231121-1509',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_8__20231121-1509',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_9__20231121-1510',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5fa65032",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "!!! Succesful Jobs:  135 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-10__20231121-1501\n",
      "!!! Succesful Jobs:  113 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-9__20231121-1501\n",
      "!!! Succesful Jobs:  128 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-8__20231121-1502\n",
      "!!! Succesful Jobs:  116 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-7__20231121-1502\n",
      "!!! Succesful Jobs:  109 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-6__20231121-1503\n",
      "!!! Succesful Jobs:  93 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-5__20231121-1503\n",
      "!!! Succesful Jobs:  85 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-4__20231121-1504\n",
      "!!! Succesful Jobs:  84 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-3__20231121-1505\n",
      "!!! Succesful Jobs:  84 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-2__20231121-1505\n",
      "!!! Succesful Jobs:  87 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_-1__20231121-1506\n",
      "!!! Succesful Jobs:  82 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_0__20231121-1506\n",
      "!!! Succesful Jobs:  51 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_1__20231121-1507\n",
      "!!! Succesful Jobs:  38 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_2__20231121-1507\n",
      "!!! Succesful Jobs:  14 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_3__20231121-1508\n",
      "!!! Succesful Jobs:  56 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_4__20231121-1508\n",
      "!!! Succesful Jobs:  34 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_5__20231121-1508\n",
      "!!! Succesful Jobs:  111 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_6__20231121-1509\n",
      "!!! Succesful Jobs:  32 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_7__20231121-1509\n",
      "!!! Succesful Jobs:  98 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_8__20231121-1509\n",
      "!!! Succesful Jobs:  56 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_9__20231121-1510\n",
      "!!! Succesful Jobs:  48 / 200  in file:  /afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510\n"
     ]
    }
   ],
   "source": [
    "    for test_name in test_list:\n",
    "\n",
    "        n_jobs = int(subprocess.check_output(\"find \"+ test_name +\" -maxdepth 1 -mindepth 1 -type d | grep Job. | wc -l\", shell=True))\n",
    "\n",
    "        losses_json =[]\n",
    "\n",
    "        for i in range(n_jobs):\n",
    "            file_path = (subprocess.check_output(\"echo \" + test_name + '/Job.' + str(i) + '/Outputdata/lossmap*.json', shell=True)).decode('ascii').strip()\n",
    "            if os.path.exists(file_path):\n",
    "                losses_json.append(file_path)\n",
    "\n",
    "        n_jobs_verify  = len(losses_json)\n",
    "        if n_jobs != n_jobs_verify:\n",
    "            print(\"!!! Succesful Jobs: \", n_jobs_verify, '/', n_jobs, ' in file: ', test_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4785ad0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.1/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.2/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.7/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.12/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.20/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.23/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.26/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.28/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.35/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.40/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.41/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.44/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.55/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.56/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.63/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.66/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.69/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.71/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.78/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.80/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.82/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.83/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.84/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.87/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.97/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.105/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.108/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.110/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.111/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.120/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.125/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.126/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.129/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.134/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.139/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.147/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.150/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.152/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.154/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.161/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.172/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.177/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.179/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.181/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.183/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.192/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.194/Outputdata/lossmap_B2V.json',\n",
       " '/afs/cern.ch/work/c/cmaccani/xsuite_sim/twocryst_sim/Condor/new_sim_6sig/TEST_B2V_align_test_CRY6.0_10__20231121-1510/Job.195/Outputdata/lossmap_B2V.json']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "losses_json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4e89da66",
   "metadata": {},
   "outputs": [],
   "source": [
    "ThisLM = lm.SimulatedLossMap(lmtype=lm.LMType.B2V, machine=lm.Machine.LHC)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fc309de6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maximum inefficiency in the DS is 2.24e-05.\n"
     ]
    }
   ],
   "source": [
    "#ThisLM.load_data_json(json_files=losses_json)\n",
    "ThisLM.load_data_json(json_files=losses_json)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ece336ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pymadx.Tfs.Load> normal file\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<Figure size 1440x864 with 3 Axes>,\n",
       " array([<Axes: xlabel='S [m]', ylabel='Norm. inefficiency [arb. unit]'>,\n",
       "        <Axes: >,\n",
       "        <Axes: xlabel='S [m]', ylabel='Norm. inefficiency [arb. unit]'>],\n",
       "       dtype=object))"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1440x864 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lm.plot_lossmap(ThisLM, zoom=True, layout=\"./input_files/layout_flat_top_b2.tfs\",  outfile = \"./Outputdata/TEST_False2.png\")  #, outfile = \"./Outputdata/Lossmap_outputs/\"+outfile_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "49dc9b99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6621dbd41b444e50a2bb31308a88c7f0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Box(children=(Dropdown(description='norm', index=3, options=('none', 'max', 'coll_max', 'total'), value='total…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ba63199e3580459eb9cf3276a1f87885",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FigureWidget({\n",
       "    'data': [{'base': 1e-17,\n",
       "              'hovertemplate': 'S=%{x:.2f} m, value=%{y:1.2e}<br>%{hovertext}',\n",
       "              'hovertext': array([  10.,   11.,   12.,   13.,   14.,   15.,   17.,   18.,   21.,   62.,\n",
       "                                    63.,   64.,   65., 1206., 1207., 1208., 1212., 1213., 1214., 1215.,\n",
       "                                  1216., 1217., 1218., 1219., 1220., 1221., 1222., 1223., 1224., 1225.,\n",
       "                                  1226., 1227., 1228., 1229., 1230., 1231., 1232., 1233., 1234., 1235.,\n",
       "                                  1236., 1237., 1238., 1239., 1240., 1241., 1242., 1243., 1244., 1245.,\n",
       "                                  1246., 1247., 1248., 1252., 1253., 1255., 1256., 1257., 1258., 1259.,\n",
       "                                  1260., 1261., 1262., 1265., 1266., 1267., 1268., 1269., 1270., 1271.,\n",
       "                                  1272., 1273., 1274., 1275., 1276., 1277., 1278., 1279., 1280., 1281.,\n",
       "                                  1282., 1283., 1284., 1285., 1286., 1287., 1288., 1289., 1290., 1291.,\n",
       "                                  1292., 1293., 1294., 1295., 1296., 1297., 1298., 1299., 1300., 1301.,\n",
       "                                  1302., 1303., 1304., 1305., 1306., 1307., 1308., 1309., 1310., 1311.,\n",
       "                                  1312., 1313., 1314., 1315., 1316., 1317., 1318., 1319., 1320., 1321.,\n",
       "                                  1322., 1323., 1324., 1325., 1326., 1327., 1328., 1329., 1330., 1331.,\n",
       "                                  1332., 1333., 1334., 1335., 1336., 1337.]),\n",
       "              'marker': {'color': 'red', 'line': {'color': 'red', 'width': 1.5}},\n",
       "              'name': 'Warm',\n",
       "              'type': 'bar',\n",
       "              'uid': '83921ad4-0601-4d87-a5f0-326b891cf952',\n",
       "              'width': 0.8,\n",
       "              'x': array([ 6626.95,  6630.75,  6634.55,  6638.35,  6642.05,  6647.15,  6688.55,\n",
       "                           6714.65,  6833.35,  6870.45,  6870.55,  6870.65,  6870.85, 19864.45,\n",
       "                          19864.65, 19873.25, 19908.15, 19908.85, 19908.95, 19909.05, 19909.35,\n",
       "                          19909.45, 19909.65, 19910.05, 19911.85, 19912.15, 19912.45, 19913.15,\n",
       "                          19913.45, 19913.55, 19914.05, 19914.45, 19914.65, 19914.85, 19914.95,\n",
       "                          19915.15, 19915.45, 19915.55, 19915.65, 19920.85, 19921.35, 19922.35,\n",
       "                          19923.75, 19923.95, 19924.05, 19924.65, 19928.45, 19931.95, 19932.25,\n",
       "                          19932.35, 19933.05, 19935.95, 19941.05, 20052.05, 20067.45, 20072.95,\n",
       "                          20073.35, 20074.15, 20075.15, 20076.35, 20078.15, 20078.65, 20080.15,\n",
       "                          20115.55, 20115.95, 20116.05, 20116.15, 20116.25, 20116.35, 20116.45,\n",
       "                          20116.55, 20116.65, 20116.75, 20116.85, 20116.95, 20117.05, 20117.15,\n",
       "                          20117.25, 20117.35, 20117.45, 20117.55, 20117.65, 20117.75, 20117.85,\n",
       "                          20117.95, 20118.05, 20118.15, 20118.45, 20119.25, 20119.35, 20119.45,\n",
       "                          20119.55, 20119.85, 20119.95, 20120.05, 20120.25, 20120.35, 20120.55,\n",
       "                          20120.65, 20120.75, 20120.85, 20120.95, 20121.35, 20121.45, 20121.65,\n",
       "                          20121.75, 20121.85, 20121.95, 20122.05, 20122.15, 20122.45, 20122.55,\n",
       "                          20122.65, 20122.75, 20122.85, 20123.35, 20123.85, 20123.95, 20124.35,\n",
       "                          20124.45, 20124.65, 20124.85, 20125.25, 20125.35, 20126.85, 20127.15,\n",
       "                          20127.65, 20128.05, 20128.55, 20129.05, 20130.95, 20131.45, 20132.45,\n",
       "                          20134.25, 20138.45, 20139.65]),\n",
       "              'xaxis': 'x2',\n",
       "              'y': array([2.90216876e-07, 2.90216876e-07, 2.90216876e-07, 2.90216876e-07,\n",
       "                          2.90216876e-06, 8.70650629e-07, 2.90216876e-07, 5.80433752e-07,\n",
       "                          1.42496486e-04, 1.74130126e-06, 2.61195189e-06, 8.70650629e-07,\n",
       "                          1.97347476e-05, 2.90216876e-07, 2.90216876e-07, 2.90216876e-07,\n",
       "                          2.61195189e-06, 2.90216876e-07, 2.90216876e-07, 5.80433752e-07,\n",
       "                          2.90216876e-07, 2.90216876e-07, 2.90216876e-07, 8.70650629e-07,\n",
       "                          2.90216876e-07, 5.80433752e-07, 8.70650629e-07, 5.80433752e-07,\n",
       "                          2.90216876e-07, 5.80433752e-07, 2.90216876e-07, 2.90216876e-07,\n",
       "                          2.90216876e-07, 2.90216876e-07, 2.90216876e-07, 2.90216876e-07,\n",
       "                          1.45108438e-06, 2.90216876e-07, 2.90216876e-07, 2.90216876e-07,\n",
       "                          2.90216876e-07, 2.90216876e-07, 2.90216876e-07, 2.90216876e-07,\n",
       "                          2.90216876e-07, 2.90216876e-07, 2.90216876e-07, 5.80433752e-07,\n",
       "                          1.45108438e-06, 2.90216876e-07, 2.90216876e-07, 4.93368689e-06,\n",
       "                          2.90216876e-07, 3.19238564e-06, 2.90216876e-07, 2.90216876e-07,\n",
       "                          2.90216876e-07, 2.90216876e-07, 2.90216876e-07, 2.90216876e-07,\n",
       "                          2.90216876e-07, 2.90216876e-07, 2.61195189e-06, 2.26369163e-05,\n",
       "                          1.16086750e-06, 2.90216876e-07, 1.16086750e-06, 2.61195189e-06,\n",
       "                          8.70650629e-07, 1.16086750e-06, 2.32173501e-06, 2.03151813e-06,\n",
       "                          8.70650629e-07, 8.70650629e-07, 5.80433752e-07, 1.16086750e-06,\n",
       "                          2.61195189e-06, 8.70650629e-07, 1.16086750e-06, 5.80433752e-07,\n",
       "                          8.70650629e-07, 2.90216876e-06, 5.80433752e-07, 8.70650629e-07,\n",
       "                          8.70650629e-07, 1.45108438e-06, 8.70650629e-07, 5.80433752e-07,\n",
       "                          8.70650629e-07, 2.90216876e-07, 5.80433752e-07, 7.25542190e-06,\n",
       "                          1.16086750e-06, 2.90216876e-07, 2.90216876e-07, 5.80433752e-07,\n",
       "                          5.80433752e-07, 2.90216876e-07, 5.80433752e-07, 2.90216876e-07,\n",
       "                          5.80433752e-07, 2.90216876e-07, 2.90216876e-07, 1.16086750e-06,\n",
       "                          2.90216876e-07, 2.90216876e-07, 8.70650629e-07, 5.80433752e-07,\n",
       "                          8.70650629e-07, 2.90216876e-07, 8.70650629e-07, 2.90216876e-07,\n",
       "                          2.90216876e-07, 5.80433752e-07, 4.35325314e-06, 5.80433752e-07,\n",
       "                          2.90216876e-07, 2.90216876e-07, 2.90216876e-07, 5.80433752e-07,\n",
       "                          2.90216876e-07, 2.90216876e-07, 2.90216876e-07, 2.90216876e-07,\n",
       "                          2.90216876e-07, 1.74130126e-06, 2.90216876e-07, 2.90216876e-07,\n",
       "                          2.90216876e-07, 2.90216876e-07, 8.70650629e-07, 2.90216876e-07,\n",
       "                          2.90216876e-07, 2.90216876e-07, 5.80433752e-07, 2.90216876e-07]),\n",
       "              'yaxis': 'y2'},\n",
       "             {'base': 1e-17,\n",
       "              'hovertemplate': 'S=%{x:.2f} m, value=%{y:1.2e}<br>%{hovertext}',\n",
       "              'hovertext': array([1.000e+00, 2.000e+00, 2.300e+01, ..., 1.197e+03, 1.198e+03, 1.199e+03]),\n",
       "              'marker': {'color': 'blue', 'line': {'color': 'blue', 'width': 1.5}},\n",
       "              'name': 'Cold',\n",
       "              'type': 'bar',\n",
       "              'uid': 'd6e7248f-7c6b-4795-ac7d-e466d14e4b43',\n",
       "              'width': 0.8,\n",
       "              'x': array([ 6135.45,  6328.25,  6866.15, ..., 19696.35, 19696.95, 19698.15]),\n",
       "              'xaxis': 'x2',\n",
       "              'y': array([2.90216876e-07, 2.90216876e-07, 2.90216876e-07, ..., 2.90216876e-07,\n",
       "                          2.90216876e-07, 2.90216876e-07]),\n",
       "              'yaxis': 'y2'},\n",
       "             {'base': 1e-17,\n",
       "              'hovertemplate': 'S=%{x:.2f} m, value=%{y:1.2e}<br>%{hovertext}',\n",
       "              'hovertext': array(['TCTPV.4R1.B2', 'TCLA.7L3.B2', 'TCLA.6L3.B2', 'TCLA.B5L3.B2',\n",
       "                                  'TCLA.A5L3.B2', 'TCSG.B5L3.B2', 'TCSG.A5L3.B2', 'TCSG.4L3.B2',\n",
       "                                  'TARGET.4L3.B2', 'TCCS.5R3.B2', 'TCSG.5R3.B2', 'TCP.6R3.B2',\n",
       "                                  'TCTPV.4R5.B2', 'TCTPH.4R5.B2', 'TCSP.A4L6.B2', 'TCDQA.C4L6.B2',\n",
       "                                  'TCDQA.A4L6.B2', 'TCLA.A7L7.B2', 'TCLA.D6L7.B2', 'TCLA.C6L7.B2',\n",
       "                                  'TCLA.B6L7.B2', 'TCLA.A6L7.B2', 'TCSPM.6L7.B2', 'TCSPM.E5L7.B2',\n",
       "                                  'TCSG.D5L7.B2', 'TCSG.B5L7.B2', 'TCSG.A4L7.B2', 'TCSG.A4R7.B2',\n",
       "                                  'TCSPM.B4R7.B2', 'TCSG.D4R7.B2', 'TCSG.A5R7.B2', 'TCSG.B5R7.B2',\n",
       "                                  'TCSG.A6R7.B2', 'TCP.B6R7.B2', 'TCP.C6R7.B2', 'TCP.D6R7.B2',\n",
       "                                  'TCTPV.4R8.B2', 'TCTPH.4R8.B2'], dtype=object),\n",
       "              'marker': {'color': 'black', 'line': {'color': 'black', 'width': 1.5}},\n",
       "              'name': 'Collimator',\n",
       "              'type': 'bar',\n",
       "              'uid': 'e7857473-ac5e-4874-90db-7f6edc1b94f8',\n",
       "              'width': 0.8,\n",
       "              'x': array([  145.94499969,  6414.26579701,  6485.67129647,  6572.22079396,\n",
       "                           6574.22079396,  6604.70079396,  6610.52079396,  6621.86579396,\n",
       "                           6653.3375    ,  6773.7       ,  6808.44879396,  6841.77029176,\n",
       "                          13475.53894639, 13477.53894606, 16507.62816201, 16515.08816201,\n",
       "                          16518.63816201, 19756.46437827, 19774.09237827, 19776.09237827,\n",
       "                          19809.36137672, 19840.23537608, 19845.30137608, 19879.90637608,\n",
       "                          19885.90637608, 19901.90637608, 19985.16237608, 20001.16237608,\n",
       "                          20003.16237608, 20071.08837608, 20092.41837608, 20096.41837608,\n",
       "                          20155.64587608, 20195.14037393, 20197.14037378, 20199.14037363,\n",
       "                          23431.45958918, 23433.45958844]),\n",
       "              'xaxis': 'x2',\n",
       "              'y': array([1.16086750e-07, 1.74130126e-07, 2.90216876e-08, 1.45108438e-07,\n",
       "                          1.16086750e-07, 2.35075670e-06, 2.69901695e-06, 1.29146510e-05,\n",
       "                          3.01825551e-04, 3.91792783e-04, 4.74504593e-05, 3.94017779e-04,\n",
       "                          8.70650629e-08, 2.90216876e-08, 2.75706032e-06, 9.67389587e-09,\n",
       "                          1.11249803e-06, 1.43947571e-05, 2.63807140e-05, 7.18286769e-05,\n",
       "                          5.94944596e-06, 1.03346230e-04, 1.13997189e-04, 4.72502096e-04,\n",
       "                          1.97141422e-03, 2.06141047e-03, 6.53429101e-03, 6.68024108e-03,\n",
       "                          1.31656886e-03, 6.68775769e-03, 2.22432952e-02, 3.18580352e-02,\n",
       "                          3.15313961e-02, 2.68238268e-02, 2.38882348e-03, 8.54016606e-01,\n",
       "                          2.90216876e-08, 2.90216876e-08]),\n",
       "              'yaxis': 'y2'},\n",
       "             {'base': array([-1.0, -2.0, 0.0, ..., -2.0, 0.0, -1.0], dtype=object),\n",
       "              'hovertemplate': '%{hovertext}<br>S=%{x:.2f} m<extra></extra>',\n",
       "              'hovertext': array(['TAS.1R1', 'MQXA.1R1', 'MQXB.A2R1', ..., 'MQXB.A2L1', 'MQXA.1L1',\n",
       "                                  'TAS.1L1'], dtype=object),\n",
       "              'marker': {'color': array(['black', '#d10000', '#d10000', ..., '#d10000', '#d10000', 'black'],\n",
       "                                        dtype=object),\n",
       "                         'line': {'color': array(['black', '#d10000', '#d10000', ..., '#d10000', '#d10000', 'black'],\n",
       "                                                 dtype=object),\n",
       "                                  'width': 0.5}},\n",
       "              'showlegend': False,\n",
       "              'type': 'bar',\n",
       "              'uid': 'f5afcc83-90e1-4122-9c08-be70f33c05bc',\n",
       "              'width': array([1.8 , 6.37, 5.5 , ..., 5.5 , 6.37, 1.8 ]),\n",
       "              'x': array([1.99500000e+01, 2.61500000e+01, 3.48000000e+01, ..., 2.66240832e+04,\n",
       "                          2.66327332e+04, 2.66389042e+04]),\n",
       "              'xaxis': 'x',\n",
       "              'y': array([2., 2., 2., ..., 2., 2., 2.]),\n",
       "              'yaxis': 'y'},\n",
       "             {'line': {'color': 'gray', 'width': 0.5},\n",
       "              'mode': 'lines',\n",
       "              'showlegend': False,\n",
       "              'type': 'scatter',\n",
       "              'uid': '821f01e5-a68a-4277-9116-45e47c4410c3',\n",
       "              'x': [20.85, 26639.8042],\n",
       "              'xaxis': 'x',\n",
       "              'y': [0, 0],\n",
       "              'yaxis': 'y'}],\n",
       "    'layout': {'hovermode': 'closest',\n",
       "               'margin': {'b': 20, 'l': 20, 'r': 20, 't': 30},\n",
       "               'template': '...',\n",
       "               'xaxis': {'anchor': 'y',\n",
       "                         'domain': [0.0, 1.0],\n",
       "                         'matches': 'x2',\n",
       "                         'range': [0, 26658.8832],\n",
       "                         'showgrid': False,\n",
       "                         'showline': False,\n",
       "                         'showticklabels': False,\n",
       "                         'ticks': ''},\n",
       "               'xaxis2': {'anchor': 'y2',\n",
       "                          'domain': [0.0, 1.0],\n",
       "                          'exponentformat': 'none',\n",
       "                          'mirror': True,\n",
       "                          'range': [0, 26658.8832],\n",
       "                          'title': {'text': 'S [m]'}},\n",
       "               'yaxis': {'anchor': 'x',\n",
       "                         'domain': [0.8938775510204082, 1.0],\n",
       "                         'fixedrange': True,\n",
       "                         'showgrid': False,\n",
       "                         'showline': False,\n",
       "                         'showticklabels': False,\n",
       "                         'ticks': '',\n",
       "                         'zeroline': False},\n",
       "               'yaxis2': {'anchor': 'x2',\n",
       "                          'domain': [0.0, 0.8510204081632654],\n",
       "                          'exponentformat': 'e',\n",
       "                          'mirror': True,\n",
       "                          'range': [-7.0, 0.9542425094393249],\n",
       "                          'showexponent': 'all',\n",
       "                          'showgrid': True,\n",
       "                          'title': {'text': 'Norm. inefficiency [arb. unit]'},\n",
       "                          'type': 'log'}}\n",
       "})"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.plot_lossmap_interactive(ThisLM, norm='total', layout=\"./input_files/layout_flat_top_b2.tfs\")  #"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e36c0fb3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>s</th>\n",
       "      <th>name</th>\n",
       "      <th>losses_type</th>\n",
       "      <th>losses</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6574.220794</td>\n",
       "      <td>tcla.a5l3.b2</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             s          name  losses_type  losses\n",
       "6  6574.220794  tcla.a5l3.b2  Losses.COLL     4.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "losses_df = ThisLM._losses\n",
    "losses_df[losses_df['name']=='tcla.a5l3.b2']\n",
    "\n",
    "#'target.4l3.b2'\n",
    "\n",
    "#loss_tcp = int(losses_df[losses_df['name']=='tcp.d6r7.b2']['losses'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb047b90",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94a15c10",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "sparkconnect": {
   "bundled_options": [
    "NXCALS"
   ],
   "list_of_options": []
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
