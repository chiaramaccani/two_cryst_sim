def _generate_4D_pencil_one_jaw(line, name, num_particles, plane, side, impact_parameter,
                                dr_sigmas, match_at_s, is_converging):
    coll = line[name]

    if side == '+':
        if is_converging:
            if isinstance(coll, EverestCrystal):
                pencil_pos = coll.jaw_U + impact_parameter
            else:
                pencil_pos = coll.jaw_LU + impact_parameter
        else:
            if isinstance(coll, EverestCrystal):
                pencil_pos = coll.jaw_D - impact_parameter
            else:
                pencil_pos = coll.jaw_LD + impact_parameter
    elif side == '-':
        if is_converging:
            if isinstance(coll, EverestCrystal):
                pencil_pos = coll.jaw_U - impact_parameter
            else:
                pencil_pos = coll.jaw_RU - impact_parameter
        else:
            if isinstance(coll, EverestCrystal):
                pencil_pos = coll.jaw_D + impact_parameter
            else:
                pencil_pos = coll.jaw_RD - impact_parameter

    # Collimator plane: generate pencil distribution
    pencil, p_pencil = xp.generate_2D_pencil_with_absolute_cut(
                        num_particles, plane=plane, absolute_cut=pencil_pos, line=line,
                        dr_sigmas=dr_sigmas, nemitt_x=coll.nemitt_x, nemitt_y=coll.nemitt_y,
                        at_element=name, side=side,match_at_s=match_at_s
                       )

    # Other plane: generate gaussian distribution in normalized coordinates
    transverse_norm   = np.random.normal(size=num_particles)
    p_transverse_norm = np.random.normal(size=num_particles)

    return [pencil, p_pencil, transverse_norm, p_transverse_norm]



in Lossmap
    from .beam_elements import collimator_classes, _all_collimator_classes, crystal_classes #, _K2Collimator

            #coll_classes = list(set(collimator_classes) + (_K2Collimator) - set(crystal_classes))
        coll_classes = list(set(collimator_classes) - set(crystal_classes))


                if self._line_is_reversed: