{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "33b12567",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Packages pyspark or cern.nxcals are not installed. Data retrieval from NXCALS is not possible.\n",
      " If you are on SWAN and did not expect this warning, then restart and load the 'NXCals Pro' software stack.\n",
      "No pytransport functionality\n",
      "No pytransport functionality\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import os\n",
    "import subprocess\n",
    "\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import yaml\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "import lossmaps as lm\n",
    "import xobjects as xo\n",
    "\n",
    "import xtrack as xt\n",
    "import xcoll as xc\n",
    "\n",
    "import lossmaps as lm\n",
    "from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n",
    "\n",
    "import xarray as xr\n",
    "\n",
    "import json\n",
    "\n",
    "import xtrack as xt\n",
    "import xpart as xp\n",
    "import xobjects as xo\n",
    "\n",
    "\n",
    "import pickle \n",
    "import h5py\n",
    "import io\n",
    "import scipy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c8aa112",
   "metadata": {},
   "source": [
    "# Particles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ef2f1da0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20240110-1254\r\n",
      "TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20240110-1249\r\n",
      "TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20240109-1222\r\n",
      "TEST_IR3_IR7rem_TCCS_8.7__target_absorber_20231222-1830\r\n",
      "TEST_IR3_IR7rem_TCCS_8.2__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_7.7__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20231222-1829\r\n",
      "TEST_IR7rem_TCCS_8.7__target_absorber_20231222-1826\r\n",
      "TEST_IR7rem_TCCS_8.2__target_absorber_20231222-1826\r\n",
      "TEST_IR7rem_TCCS_7.7__target_absorber_20231222-1825\r\n",
      "TEST_IR7rem_TCCS_7.2__target_absorber_20231222-1824\r\n",
      "TEST_NEW_SETUP__xsuite_20231215-2005\r\n"
     ]
    }
   ],
   "source": [
    "! ls -th ${HOME_TWOCRYST}/Condor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a25e3b66",
   "metadata": {},
   "outputs": [],
   "source": [
    "job_name_new = \"TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20240110-1254\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e5880441",
   "metadata": {},
   "outputs": [],
   "source": [
    "job_name_IR3_IR7_7_2 = \"TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20231222-1829\"\n",
    "job_name_IR7_7_2 = \"TEST_IR7rem_TCCS_7.2__target_absorber_20231222-1824\"\n",
    "job_name_IR3_IR7_7_7 = \"TEST_IR3_IR7rem_TCCS_7.7__target_absorber_20231222-1829\"\n",
    "job_name_IR7_7_7 = \"TEST_IR7rem_TCCS_7.7__target_absorber_20231222-1825\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "351c1601",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ParticleAnalysis():\n",
    "\n",
    "    def __init__(self, element_type, n_sigma, length, xdim, ydim, jaw_L, bend=None, align_angle = None, line_idx= None, \n",
    "                 beam = 2, plane = 'V',\n",
    "                 pot_crit = 21.34, #16 #eV Silicon\n",
    "                 en_crit = 5.7e9 / 1e-2 #eV/m Silicon    #dp_Si = 1.92e-10 #m\n",
    "                 ):\n",
    "\n",
    "        self.beam = beam\n",
    "        self.plane = plane\n",
    "        self.element_type = element_type\n",
    "        self.n_sigma = n_sigma\n",
    "        self.length = length\n",
    "        self.xdim = xdim\n",
    "        self.ydim = ydim\n",
    "        self.align_angle = align_angle\n",
    "        self.jaw_L = jaw_L\n",
    "        self.en_crit = en_crit\n",
    "        self.pot_crit = pot_crit\n",
    "        self.line_idx = line_idx\n",
    "        self.p0c = None\n",
    "        self.npart = None\n",
    "        self.data = None\n",
    "        self.impact_part = None\n",
    "        self.line_idx = line_idx\n",
    "        self.abs_y_low = self.jaw_L\n",
    "        self.abs_y_up = self.jaw_L + self.ydim\n",
    "        self.abs_x_low = -self.xdim/2\n",
    "        self.abs_x_up = self.ydim/2\n",
    "        \n",
    "        self.lossmap = None \n",
    "        self.TCCS_name = 'tccs.5r3.b2'\n",
    "        self.TCCP_name = 'tccp.4l3.b2'\n",
    "        self.TARGET_name = 'target.4l3.b2'\n",
    "        self.TCLA_name = 'tcla.a5l3.b2'\n",
    "        \n",
    "        if element_type == 'crystal':\n",
    "            self.bend = bend \n",
    "            \n",
    "            \n",
    "    def retreive_file_path(self, prefix_name, file_name = 'particle*.h5', path = \"/eos/home-i04/c/cmaccani/xsuite_sim/two_cryst_sim/Condor/\"):\n",
    "\n",
    "        test_list = [path + i for i in os.listdir(path) if prefix_name in i]\n",
    "        for test_name in test_list:\n",
    "\n",
    "            n_jobs = int(subprocess.check_output(\"find \"+ test_name +\" -maxdepth 1 -mindepth 1 -type d | grep Job. | wc -l\", shell=True))\n",
    "\n",
    "            path_list =[]\n",
    "\n",
    "            for i in range(n_jobs):\n",
    "                file_path_part = (subprocess.check_output(\"echo \" + test_name + '/Job.' + str(i) + '/Outputdata/' + file_name, shell=True)).decode('ascii').strip()\n",
    "                if os.path.exists(file_path_part):\n",
    "                    path_list.append(file_path_part)\n",
    "\n",
    "            n_jobs_verify  = len(path_list)\n",
    "            if n_jobs != n_jobs_verify:\n",
    "                print(\"!!! Succesful Jobs: \", n_jobs_verify, '/', n_jobs, ' in file: ', test_name)\n",
    "        return path_list   \n",
    "    \n",
    "    \n",
    "\n",
    "    def load_particles(self, path, df_key = 'particles', Condor=True, file_name='particle*.h5'):\n",
    "        \n",
    "        if Condor == True:\n",
    "            h5_file_path = self.retreive_file_path(prefix_name = path, file_name = file_name)\n",
    "        else:\n",
    "            h5_file_path = path\n",
    "\n",
    "        if not hasattr(h5_file_path, '__iter__') or isinstance(h5_file_path, str):\n",
    "            h5_file_path = [h5_file_path]\n",
    "\n",
    "        df_particles = pd.DataFrame()\n",
    "        npart = 0\n",
    "\n",
    "        for file in h5_file_path:\n",
    "            try:\n",
    "                df_tmp = pd.read_hdf(file, key=df_key) #test_particles_B2V\n",
    "                df_tmp['particle_id'] = df_tmp['particle_id'] + npart    \n",
    "                df_tmp['parent_particle_id'] = df_tmp['parent_particle_id'] + npart \n",
    "                df_particles = pd.concat([df_particles, df_tmp])\n",
    "            except FileNotFoundError:\n",
    "                print(f\"Error: File not found at {file}\")\n",
    "                continue\n",
    "            except pd.errors.EmptyDataError:\n",
    "                print(f\"Error: The HDF5 file at {file} is empty.\")\n",
    "                continue\n",
    "            except Exception as e:\n",
    "                print(f\"Error: An unexpected error occurred - {e}\")\n",
    "                continue\n",
    "            npart = npart + len(df_tmp)\n",
    "        #check if there are duplicated     \n",
    "        data = df_particles['particle_id']\n",
    "        duplicated_mask = data.duplicated()\n",
    "        if len(data[duplicated_mask]) != 0:\n",
    "            print(f'There are repeated particle ids: {data[duplicated_mask]}')\n",
    "            \n",
    "        self.npart = npart       \n",
    "        self.data = df_particles\n",
    "            \n",
    "        p0c = None\n",
    "        if len(self.data['p0c'].unique()) == 1:\n",
    "            p0c = self.data['p0c'].unique()[0]\n",
    "        else:\n",
    "            print('There are particles at different energies')            \n",
    "        self.p0c = p0c\n",
    "        \n",
    "        if self.element_type == 'crystal':\n",
    "            xp_crit0 = np.sqrt(2.0*self.pot_crit/self.p0c)\n",
    "            Rcrit = self.p0c/self.en_crit\n",
    "            self.xp_crit = xp_crit0*(1-Rcrit/self.bend)\n",
    "            if(self.xp_crit < 0):\n",
    "                print(\"!!!!!!!!!!!!! \\nERROR: particles at\",self.p0c, f\"eV cannot be channeled if bending is {self.bend} m \\n!!!!!!!!!!!!!\")\n",
    "\n",
    "        \n",
    "    def plot_distributions(self, x, y, px, py, **kwargs):\n",
    "\n",
    "        fig1 = plt.figure( figsize=(22, 10))\n",
    "        ax1 = fig1.add_subplot(2,3,1)\n",
    "        ax1.hist(x, bins=100)\n",
    "        ax1.set_xlabel('x [mm]')\n",
    "        ax1.set_ylabel(\"\")\n",
    "        ax1.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "        ax2 = fig1.add_subplot(2,3,2)\n",
    "        ax2.hist(y, bins=100) \n",
    "        ax2.set_xlabel('y [mm]')\n",
    "        ax2.set_ylabel('')\n",
    "        \n",
    "        ax2.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax2.set_title(f'Total particles: {len(x)}')\n",
    "\n",
    "        ax3 = fig1.add_subplot(2,3,3)\n",
    "        h = ax3.hist2d(x, y, bins=100, norm=matplotlib.colors.LogNorm())#,  vmin = 1, vmax = 1e6, range = ([-40e-6, 40e-6], [-40e-6,40e-6])) \n",
    "        ax3.set_xlabel(r'x [mm]')\n",
    "        #ax3.set_ylim(0,0.008)\n",
    "        ax3.set_ylabel(r'y [mm]')\n",
    "        ax3.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax3.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.yticks()[0]])\n",
    "        ax3_tw = ax3.twinx()\n",
    "        sigma_abs = self.jaw_L/self.n_sigma\n",
    "        ax3_tw.set_ylim(ax3.get_ylim()[0]/sigma_abs, ax3.get_ylim()[1]/sigma_abs)\n",
    "        yticks = np.arange(np.ceil(ax3_tw.get_ylim()[0]), np.floor(ax3_tw.get_ylim()[1]) + 1, 2)\n",
    "        ax3_tw.set_yticks(yticks)\n",
    "        ax3_tw.set_ylabel(r' n $\\sigma$')\n",
    "\n",
    "        if \"sigma\" in kwargs and kwargs['sigma'] == True:\n",
    "            ax3_tw.axhline(self.n_sigma, color = 'r', linestyle = '--')\n",
    "            #ax3_tw.text( 0,0, r'TCP $\\sigma$') #max(ax3.get_xticks())-1.5e-3, 4,\n",
    "\n",
    "        axins = inset_axes(ax3, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "        fig1.colorbar(h[3], cax=axins, orientation='vertical', label='Count (log scale)')\n",
    "        ax3.grid(linestyle=':')\n",
    "\n",
    "        ax12 = fig1.add_subplot(2,3,4)\n",
    "        ax12.hist(px, bins=100)\n",
    "        ax12.set_xlabel(r'px [$\\mu$rad]')\n",
    "        ax12.set_ylabel(\"\")\n",
    "        \n",
    "        ax12.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "\n",
    "        ax22 = fig1.add_subplot(2,3,5)\n",
    "        ax22.hist(py, bins=100) \n",
    "        ax22.set_xlabel(r'py [$\\mu$rad]')\n",
    "        ax22.set_ylabel('')\n",
    "        ax22.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "        if self.element_type == 'crystal' and \"xpcrit\" in kwargs and kwargs['xpcrit'] == True:   \n",
    "            mean_angle = None\n",
    "            if self.align_angle is None and \"py_mean\" in kwargs:\n",
    "                mean_angle = kwargs['py_mean']\n",
    "            elif self.align_angle is not None:\n",
    "                mean_angle = self.align_angle\n",
    "            elif \"calculate_mean\" in kwargs and kwargs['calculate_mean'] == True:\n",
    "                mean_angle = self.calculate_mean_py(**kwargs)\n",
    "             \n",
    "            if mean_angle is not None: \n",
    "                ax22.axvline(mean_angle, color = 'red', linestyle = '-', alpha = 0.8)\n",
    "                if(self.xp_crit < 0):\n",
    "                    print(f\"!!!!!!!!!!!!! \\nERROR: particles at {self.p0c} cannot be channeled if bending is {self.bend} \\n!!!!!!!!!!!!!\")\n",
    "                else:\n",
    "                    ax22.axvline(mean_angle  + np.abs(self.xp_crit), color = 'red', linestyle = '--', alpha = 0.9)\n",
    "                    ax22.axvline(mean_angle - np.abs(self.xp_crit), color = 'red', linestyle = '--', alpha = 0.9)\n",
    "                    chann_mask = (py > mean_angle  - np.abs(self.xp_crit)) & (py < mean_angle  + np.abs(self.xp_crit))\n",
    "                    chann = len(py[chann_mask])\n",
    "                    ax22.set_title(f'N particle inside critical angle range: {chann}')\n",
    "\n",
    "        ax32 = fig1.add_subplot(2,3,6)\n",
    "        h2 = ax32.hist2d(px, py, bins=100, norm=matplotlib.colors.LogNorm())  #,, norm=matplotlib.colors.LogNorm() range = ([-40e-6, 40e-6], [-40e-6,40e-6])\n",
    "        ax32.set_xlabel(r'px [$\\mu$rad]')\n",
    "        ax32.set_ylabel(r'py [$\\mu$rad]')\n",
    "        ax32.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax32.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.yticks()[0]])\n",
    "        axins_2 = inset_axes(ax32, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "        fig1.colorbar(h2[3], cax=axins_2, orientation='vertical', label='Count (log scale)')\n",
    "        ax32.grid(linestyle=':')\n",
    "\n",
    "        if \"log\" in kwargs and kwargs['log'] == True:  \n",
    "            ax22.set_yscale(\"log\")\n",
    "            ax2.set_yscale(\"log\")\n",
    "            ax12.set_yscale(\"log\")\n",
    "            ax1.set_yscale(\"log\")\n",
    "\n",
    "            \n",
    "        # Save the figure object using pickle\n",
    "        with open('saved_figure.pkl', 'wb') as file:\n",
    "            pickle.dump(fig1, file)\n",
    "\n",
    "        #fig1.suptitle('plot')\n",
    "        plt.show()\n",
    "        #return fig1, [ax1,ax2,ax3]\n",
    "        \n",
    "        \n",
    "    def compute_impact_particles(self, **kwargs):\n",
    "        if self.data is None:\n",
    "            self.load_particles(kwargs['h5_file_path'])\n",
    "        self.impact_part = self.data[(self.data.at_element == self.line_idx) & (self.data.state<0)]\n",
    "        print(\"Impacting particles: \", len(self.impact_part), \"/\", self.npart)\n",
    "        self.plot_distributions(self.impact_part['x'], self.impact_part['y'], self.impact_part['px'], self.impact_part['py'] )\n",
    "        \n",
    "    def load_lossmap(self, path, Condor = True, file_name='lossmap*', plot = True, layout = \"./input_files/layout_flat_top_b2.tfs\", zoom = True, outfile = None):     \n",
    "        if Condor == True:\n",
    "            path = self.retreive_file_path(path, file_name=file_name)     \n",
    "        self.lossmap = lm.SimulatedLossMap(lmtype=lm.LMType[f'B{self.beam}{self.plane}'], machine=lm.Machine.LHC)\n",
    "        self.lossmap.load_data_json(json_files=path)\n",
    "        if plot:    \n",
    "            lm.plot_lossmap(self.lossmap, zoom = zoom, layout = layout,  outfile = outfile)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72f7917c",
   "metadata": {},
   "source": [
    "ParticleAnalysis(element_type='crystal', n_sigma=7.2, length=0.004, ydim=0.002, xdim=0.035, bend=80.0, align_angle=-2.337255626586841e-05, jaw_L=0.00271382348186472, line_idx=110029)\n",
    "\n",
    "\n",
    "ParticleAnalysis(element_type='target', n_sigma=42.6, length=0.005, ydim=0.002, xdim=0.004, jaw_L=0.009610624558489989, line_idx=110984)\n",
    "\n",
    "\n",
    "ParticleAnalysis(element_type='crystal', n_sigma=42.6, length=0.07, ydim=0.002, xdim=0.004, bend=10.0, jaw_L=0.009611032559017385, line_idx=110987)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "63e9a47b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<__main__.ParticleAnalysis at 0x7efc1de347c0>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ParticleAnalysis(element_type='crystal', n_sigma=7.2, length=0.004, ydim=0.002, xdim=0.035, bend=80.0, align_angle=-2.337255626586841e-05, jaw_L=0.00271382348186472, line_idx=110029)\n",
    "ParticleAnalysis(element_type='target', n_sigma=42.6, length=0.005, ydim=0.002, xdim=0.004, jaw_L=0.009610624558489989, line_idx=110984)\n",
    "ParticleAnalysis(element_type='crystal', n_sigma=42.6, length=0.07, ydim=0.002, xdim=0.004, bend=10.0, jaw_L=0.009611032559017385, line_idx=110987)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1fa57297",
   "metadata": {},
   "outputs": [],
   "source": [
    "TCCS_new = ParticleAnalysis(element_type='crystal', n_sigma=7.2, length=0.004, ydim=0.002, xdim=0.035, bend=80.0, align_angle=-2.337255626586841e-05, jaw_L=0.00271382348186472, line_idx=110029)\n",
    "TARGET_new = ParticleAnalysis(element_type='target', n_sigma=42.6, length=0.005, ydim=0.002, xdim=0.004, jaw_L=0.009610624558489989, line_idx=110984)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c89e7122",
   "metadata": {},
   "outputs": [],
   "source": [
    "#IR3_IR7_7_2 = ParticleAnalysis(element_type='target', n_sigma=42.6, length=0.005, ydim=0.002, xdim=0.004, jaw_L=0.013086466664922941, line_idx=110984)\n",
    "#IR7_7_2 = ParticleAnalysis(element_type='target', n_sigma=42.6, length=0.005, ydim=0.002, xdim=0.004, jaw_L=0.013086466664922941, line_idx=110984)\n",
    "#test = ParticleAnalysis(element_type='crystal', n_sigma=5.0, length=0.004, ydim=0.002, xdim=0.035, bend=80.0, align_angle=-1.1763616021881982e-05, jaw_L=0.0016912979598174786)\n",
    "\n",
    "#IR3_IR7_7_2.load_particles(job_name_IR3_IR7_7_2)\n",
    "#IR7_7_2.load_particles(path_IR7_7_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f5fd1a29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20240110-1254'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "job_name_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c90a1475",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TCCS_new.load(path_new, df_key=\"TCCS_impacts\")\n",
    "TARGET_new.load_particles(job_name_new, df_key=\"particles\") #(path_new, df_key=\"particles\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e1381b50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Impacting particles:  604 / 100000\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1584x720 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "TARGET_new.compute_impact_particles()\n",
    "TARGET_new.impact_part['at_turn'].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a600d5fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "TARGET_new.load_lossmap(job_name_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "b23ec965",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'losses'"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TARGET_new.lossmap._main_data_colname"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "c6335b1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>s</th>\n",
       "      <th>name</th>\n",
       "      <th>length</th>\n",
       "      <th>losses_type</th>\n",
       "      <th>losses_N</th>\n",
       "      <th>losses_dE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>20005.545671</td>\n",
       "      <td>target.4l3.b2</td>\n",
       "      <td>0.005</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>576.0</td>\n",
       "      <td>576.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               s           name  length  losses_type  losses_N  losses_dE\n",
       "68  20005.545671  target.4l3.b2   0.005  Losses.COLL     576.0      576.0"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "losses_df = TARGET_new.lossmap._losses\n",
    "losses_df[losses_df['name']==TARGET_new.TARGET_name]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "acc7b9fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>s</th>\n",
       "      <th>name</th>\n",
       "      <th>length</th>\n",
       "      <th>losses_type</th>\n",
       "      <th>losses_N</th>\n",
       "      <th>losses_dE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3227.423583</td>\n",
       "      <td>tctpv.4r8.b2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6459.742798</td>\n",
       "      <td>tcp.d6r7.b2</td>\n",
       "      <td>0.6</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>71524.0</td>\n",
       "      <td>71524.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6461.742798</td>\n",
       "      <td>tcp.c6r7.b2</td>\n",
       "      <td>0.6</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>587.0</td>\n",
       "      <td>587.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6463.742798</td>\n",
       "      <td>tcp.b6r7.b2</td>\n",
       "      <td>0.6</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>2072.0</td>\n",
       "      <td>2072.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6503.237296</td>\n",
       "      <td>tcsg.a6r7.b2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>1585.0</td>\n",
       "      <td>1585.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>20048.362376</td>\n",
       "      <td>tcsg.a5l3.b2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>20054.182376</td>\n",
       "      <td>tcsg.b5l3.b2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>20084.662376</td>\n",
       "      <td>tcla.a5l3.b2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>26443.133171</td>\n",
       "      <td>tctph.6r1.b2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>14.0</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>26445.133171</td>\n",
       "      <td>tctpv.6r1.b2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Losses.COLL</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>75 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               s          name  length  losses_type  losses_N  losses_dE\n",
       "0    3227.423583  tctpv.4r8.b2     1.0  Losses.COLL       1.0        1.0\n",
       "1    6459.742798   tcp.d6r7.b2     0.6  Losses.COLL   71524.0    71524.0\n",
       "2    6461.742798   tcp.c6r7.b2     0.6  Losses.COLL     587.0      587.0\n",
       "3    6463.742798   tcp.b6r7.b2     0.6  Losses.COLL    2072.0     2072.0\n",
       "4    6503.237296  tcsg.a6r7.b2     1.0  Losses.COLL    1585.0     1585.0\n",
       "..           ...           ...     ...          ...       ...        ...\n",
       "70  20048.362376  tcsg.a5l3.b2     1.0  Losses.COLL       2.0        2.0\n",
       "71  20054.182376  tcsg.b5l3.b2     1.0  Losses.COLL       3.0        3.0\n",
       "72  20084.662376  tcla.a5l3.b2     1.0  Losses.COLL       8.0        8.0\n",
       "73  26443.133171  tctph.6r1.b2     1.0  Losses.COLL      14.0       14.0\n",
       "74  26445.133171  tctpv.6r1.b2     1.0  Losses.COLL       6.0        6.0\n",
       "\n",
       "[75 rows x 6 columns]"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "losses_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c6ee399",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e960c67",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57b6843c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8df8eff9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddb65d53",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbb6b10b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e06e6659",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9db722f3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d177a4da",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5aac6348",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_part = TARGET_new.data\n",
    "#drop_list = ['chi', 'charge_ratio', 'pdg_id', 'rvv', 'rpp', '_rng_s1', '_rng_s2', '_rng_s3', '_rng_s4', 'weight', 'ptau', 'q0', 'beta0', 'mass0', 'start_tracking_at_element', 's']\n",
    "float_variables = ['zeta', 'x', 'px', 'y', 'py', 'delta', 'gamma0', 'p0c']\n",
    "int_variables = ['at_turn', 'particle_id', 'at_element', 'state', 'parent_particle_id']\n",
    "#df_part.drop(drop_list, axis=1, inplace=True)\n",
    "df_part[float_variables] = df_part[float_variables].astype('float32')\n",
    "df_part[int_variables] = df_part[int_variables].astype('int32')\n",
    "df_part.to_hdf(Path('particles_B.h5'), key='particles', format='table', mode='a',\n",
    "          complevel=9, complib='blosc')\n",
    "\n",
    "\n",
    "file = '/eos/home-i04/c/cmaccani/xsuite_sim/old_bjorn_data/Condor/TEST__xsuite_20231208-1614/Job.0/Outputdata/TCCS_monitor_B2V_xsuite.pkl'\n",
    "with open(file, 'rb') as f:\n",
    "    loaded_dict = pickle.load(f)\n",
    "\n",
    "df = pd.DataFrame(loaded_dict['data'])\n",
    "#df = pd.DataFrame(TCCS_monitor_dict['data'])\n",
    "#variables = np.concatenate((float_variables,int_variables)).remove('at_element')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ffb2661e",
   "metadata": {},
   "outputs": [],
   "source": [
    "variables = float_variables + int_variables\n",
    "variables.remove('at_element')\n",
    "\n",
    "var_dict = {}\n",
    "\n",
    "for var in variables:\n",
    "    new_arr = np.array(df[var])\n",
    "    new_arr = new_arr.reshape((num_particles, num_turns))\n",
    "    var_dict[var] = new_arr   \n",
    "del df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "56dc14d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "TCCS_xsuite = ParticleAnalysis_1(element_type='crystal', n_sigma=5.0, length=0.004, ydim=0.002, xdim=0.035, bend=80.0, align_angle=-1.1763616021881982e-05, jaw_L=0.0016912979598174786, p0c = 1e12)\n",
    "abs_y_low_TCCS = TCCS_xsuite.abs_y_low\n",
    "abs_y_up_TCCS = TCCS_xsuite.abs_y_up\n",
    "abs_x_low_TCCS = TCCS_xsuite.abs_x_low\n",
    "abs_x_up_TCCS = TCCS_xsuite.abs_x_up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "433b7088",
   "metadata": {},
   "outputs": [],
   "source": [
    "impact_part_dict = {}\n",
    "for key in var_dict.keys():\n",
    "    impact_part_dict[key] = []\n",
    "\n",
    "for part in range(num_particles):\n",
    "    for turn in range(num_turns):\n",
    "        if var_dict['state'][part, turn] > 0 and var_dict['x'][part, turn] > abs_x_low_TCCS and var_dict['x'][part, turn] < abs_x_up_TCCS and var_dict['y'][part, turn]> abs_y_low_TCCS and var_dict['y'][part, turn] < abs_y_up_TCCS:\n",
    "            for key in var_dict.keys():\n",
    "                impact_part_dict[key].append(var_dict[key][part, turn])\n",
    "impact_part_df = pd.DataFrame(impact_part_dict) \n",
    "\n",
    "impact_part_df.rename(columns={'state': 'this_state'}, inplace=True)\n",
    "impact_part_df.rename(columns={'at_turn': 'this_turn'}, inplace=True)\n",
    "impact_part_df = pd.merge(impact_part_df, df_part[['at_element', 'state', 'at_turn', 'particle_id']], on='particle_id', how='left')\n",
    "\n",
    "impact_part_df[float_variables] = impact_part_df[float_variables].astype('float32')\n",
    "impact_part_df[int_variables] = impact_part_df[int_variables].astype('int32')\n",
    "impact_part_df['this_turn'] = impact_part_df['this_turn'].astype('int32')\n",
    "impact_part_df['this_state'] = impact_part_df['this_state'].astype('int32')\n",
    "\n",
    "impact_part_df.to_hdf(Path('particles_B.h5'), key='TCCS_impacts', format='table', mode='a',\n",
    "          complevel=9, complib='blosc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "eef7d75a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tmp_part = pd.read_hdf('particles_B.h5', key='particles')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "bdcab1a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_tmp_TCCS = pd.read_hdf('particles_B.h5', key='TCCS_impacts')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "83806393",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>zeta</th>\n",
       "      <th>particle_id</th>\n",
       "      <th>at_element</th>\n",
       "      <th>at_turn</th>\n",
       "      <th>state</th>\n",
       "      <th>parent_particle_id</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>px</th>\n",
       "      <th>py</th>\n",
       "      <th>delta</th>\n",
       "      <th>p0c</th>\n",
       "      <th>gamma0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.881937e-03</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.817700e-07</td>\n",
       "      <td>-0.000003</td>\n",
       "      <td>-2.462981e-04</td>\n",
       "      <td>0.000271</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.458799e-03</td>\n",
       "      <td>59587</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>59587</td>\n",
       "      <td>2.832933e-06</td>\n",
       "      <td>0.000010</td>\n",
       "      <td>-2.524350e-04</td>\n",
       "      <td>-0.000268</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.628155e-03</td>\n",
       "      <td>74170</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>74170</td>\n",
       "      <td>-1.134606e-07</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>-2.485836e-04</td>\n",
       "      <td>-0.000270</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.645537e-03</td>\n",
       "      <td>94252</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>94252</td>\n",
       "      <td>1.861111e-07</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>-2.471307e-04</td>\n",
       "      <td>-0.000270</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.573871e-03</td>\n",
       "      <td>76292</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>76292</td>\n",
       "      <td>1.096833e-08</td>\n",
       "      <td>0.000009</td>\n",
       "      <td>-2.475069e-04</td>\n",
       "      <td>-0.000269</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99995</th>\n",
       "      <td>4.333138e-10</td>\n",
       "      <td>89</td>\n",
       "      <td>35613</td>\n",
       "      <td>0</td>\n",
       "      <td>-333</td>\n",
       "      <td>89</td>\n",
       "      <td>1.340721e-06</td>\n",
       "      <td>0.002274</td>\n",
       "      <td>-1.900657e-08</td>\n",
       "      <td>0.000038</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99996</th>\n",
       "      <td>4.326286e-10</td>\n",
       "      <td>87</td>\n",
       "      <td>35613</td>\n",
       "      <td>0</td>\n",
       "      <td>-333</td>\n",
       "      <td>87</td>\n",
       "      <td>-3.738205e-07</td>\n",
       "      <td>0.002274</td>\n",
       "      <td>-2.059699e-08</td>\n",
       "      <td>0.000038</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99997</th>\n",
       "      <td>4.324978e-10</td>\n",
       "      <td>74</td>\n",
       "      <td>35613</td>\n",
       "      <td>0</td>\n",
       "      <td>-333</td>\n",
       "      <td>74</td>\n",
       "      <td>-5.701311e-06</td>\n",
       "      <td>0.002274</td>\n",
       "      <td>7.142945e-08</td>\n",
       "      <td>0.000038</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99998</th>\n",
       "      <td>4.293386e-10</td>\n",
       "      <td>53</td>\n",
       "      <td>35613</td>\n",
       "      <td>0</td>\n",
       "      <td>-333</td>\n",
       "      <td>53</td>\n",
       "      <td>-2.478983e-06</td>\n",
       "      <td>0.002274</td>\n",
       "      <td>5.191278e-08</td>\n",
       "      <td>0.000038</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99999</th>\n",
       "      <td>4.329960e-10</td>\n",
       "      <td>38</td>\n",
       "      <td>35613</td>\n",
       "      <td>0</td>\n",
       "      <td>-333</td>\n",
       "      <td>38</td>\n",
       "      <td>2.561387e-06</td>\n",
       "      <td>0.002274</td>\n",
       "      <td>-3.847144e-08</td>\n",
       "      <td>0.000038</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100000 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               zeta  particle_id  at_element  at_turn  state  \\\n",
       "0      1.881937e-03            0           0      200      1   \n",
       "1      2.458799e-03        59587           0      200      1   \n",
       "2      1.628155e-03        74170           0      200      1   \n",
       "3      1.645537e-03        94252           0      200      1   \n",
       "4      1.573871e-03        76292           0      200      1   \n",
       "...             ...          ...         ...      ...    ...   \n",
       "99995  4.333138e-10           89       35613        0   -333   \n",
       "99996  4.326286e-10           87       35613        0   -333   \n",
       "99997  4.324978e-10           74       35613        0   -333   \n",
       "99998  4.293386e-10           53       35613        0   -333   \n",
       "99999  4.329960e-10           38       35613        0   -333   \n",
       "\n",
       "       parent_particle_id             x         y            px        py  \\\n",
       "0                       0  4.817700e-07 -0.000003 -2.462981e-04  0.000271   \n",
       "1                   59587  2.832933e-06  0.000010 -2.524350e-04 -0.000268   \n",
       "2                   74170 -1.134606e-07  0.000008 -2.485836e-04 -0.000270   \n",
       "3                   94252  1.861111e-07  0.000008 -2.471307e-04 -0.000270   \n",
       "4                   76292  1.096833e-08  0.000009 -2.475069e-04 -0.000269   \n",
       "...                   ...           ...       ...           ...       ...   \n",
       "99995                  89  1.340721e-06  0.002274 -1.900657e-08  0.000038   \n",
       "99996                  87 -3.738205e-07  0.002274 -2.059699e-08  0.000038   \n",
       "99997                  74 -5.701311e-06  0.002274  7.142945e-08  0.000038   \n",
       "99998                  53 -2.478983e-06  0.002274  5.191278e-08  0.000038   \n",
       "99999                  38  2.561387e-06  0.002274 -3.847144e-08  0.000038   \n",
       "\n",
       "          delta           p0c       gamma0  \n",
       "0      0.000005  7.000000e+12  7460.522461  \n",
       "1      0.000005  7.000000e+12  7460.522461  \n",
       "2      0.000004  7.000000e+12  7460.522461  \n",
       "3      0.000004  7.000000e+12  7460.522461  \n",
       "4      0.000004  7.000000e+12  7460.522461  \n",
       "...         ...           ...          ...  \n",
       "99995  0.000000  7.000000e+12  7460.522461  \n",
       "99996  0.000000  7.000000e+12  7460.522461  \n",
       "99997  0.000000  7.000000e+12  7460.522461  \n",
       "99998  0.000000  7.000000e+12  7460.522461  \n",
       "99999  0.000000  7.000000e+12  7460.522461  \n",
       "\n",
       "[100000 rows x 13 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tmp_part"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ae8afc1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>zeta</th>\n",
       "      <th>x</th>\n",
       "      <th>px</th>\n",
       "      <th>y</th>\n",
       "      <th>py</th>\n",
       "      <th>delta</th>\n",
       "      <th>gamma0</th>\n",
       "      <th>p0c</th>\n",
       "      <th>this_turn</th>\n",
       "      <th>particle_id</th>\n",
       "      <th>this_state</th>\n",
       "      <th>parent_particle_id</th>\n",
       "      <th>at_element</th>\n",
       "      <th>state</th>\n",
       "      <th>at_turn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000232</td>\n",
       "      <td>-0.000019</td>\n",
       "      <td>-8.914454e-07</td>\n",
       "      <td>0.003515</td>\n",
       "      <td>-0.000036</td>\n",
       "      <td>-7.982058e-06</td>\n",
       "      <td>1065.789429</td>\n",
       "      <td>1.000000e+12</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000084</td>\n",
       "      <td>-0.000010</td>\n",
       "      <td>-1.840356e-07</td>\n",
       "      <td>0.002950</td>\n",
       "      <td>-0.000034</td>\n",
       "      <td>-1.590662e-06</td>\n",
       "      <td>1065.789429</td>\n",
       "      <td>1.000000e+12</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35613</td>\n",
       "      <td>-333</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000066</td>\n",
       "      <td>-0.000015</td>\n",
       "      <td>-6.052825e-07</td>\n",
       "      <td>0.003312</td>\n",
       "      <td>-0.000035</td>\n",
       "      <td>-8.177970e-07</td>\n",
       "      <td>1065.789429</td>\n",
       "      <td>1.000000e+12</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>37923</td>\n",
       "      <td>-333</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.000042</td>\n",
       "      <td>0.000041</td>\n",
       "      <td>6.820197e-07</td>\n",
       "      <td>0.001801</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>-9.276438e-07</td>\n",
       "      <td>1065.789429</td>\n",
       "      <td>1.000000e+12</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>35613</td>\n",
       "      <td>-333</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000069</td>\n",
       "      <td>-0.000015</td>\n",
       "      <td>-8.520024e-07</td>\n",
       "      <td>0.002821</td>\n",
       "      <td>-0.000034</td>\n",
       "      <td>-9.210257e-07</td>\n",
       "      <td>1065.789429</td>\n",
       "      <td>1.000000e+12</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>35613</td>\n",
       "      <td>-333</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>688817</th>\n",
       "      <td>0.002588</td>\n",
       "      <td>0.000623</td>\n",
       "      <td>-8.208530e-06</td>\n",
       "      <td>0.001870</td>\n",
       "      <td>-0.000030</td>\n",
       "      <td>-2.173463e-05</td>\n",
       "      <td>1065.789429</td>\n",
       "      <td>1.000000e+12</td>\n",
       "      <td>29</td>\n",
       "      <td>99998</td>\n",
       "      <td>1</td>\n",
       "      <td>99998</td>\n",
       "      <td>35613</td>\n",
       "      <td>-333</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>688818</th>\n",
       "      <td>0.000359</td>\n",
       "      <td>0.000377</td>\n",
       "      <td>9.015765e-06</td>\n",
       "      <td>0.003258</td>\n",
       "      <td>-0.000010</td>\n",
       "      <td>-4.060080e-06</td>\n",
       "      <td>1065.789429</td>\n",
       "      <td>1.000000e+12</td>\n",
       "      <td>6</td>\n",
       "      <td>99999</td>\n",
       "      <td>1</td>\n",
       "      <td>99999</td>\n",
       "      <td>36876</td>\n",
       "      <td>-333</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>688819</th>\n",
       "      <td>0.000536</td>\n",
       "      <td>-0.000154</td>\n",
       "      <td>5.146917e-06</td>\n",
       "      <td>0.002425</td>\n",
       "      <td>-0.000001</td>\n",
       "      <td>-3.916515e-06</td>\n",
       "      <td>1065.789429</td>\n",
       "      <td>1.000000e+12</td>\n",
       "      <td>9</td>\n",
       "      <td>99999</td>\n",
       "      <td>1</td>\n",
       "      <td>99999</td>\n",
       "      <td>36876</td>\n",
       "      <td>-333</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>688820</th>\n",
       "      <td>0.000579</td>\n",
       "      <td>0.000558</td>\n",
       "      <td>7.208487e-06</td>\n",
       "      <td>0.002203</td>\n",
       "      <td>-0.000031</td>\n",
       "      <td>-3.857645e-06</td>\n",
       "      <td>1065.789429</td>\n",
       "      <td>1.000000e+12</td>\n",
       "      <td>10</td>\n",
       "      <td>99999</td>\n",
       "      <td>1</td>\n",
       "      <td>99999</td>\n",
       "      <td>36876</td>\n",
       "      <td>-333</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>688821</th>\n",
       "      <td>0.000742</td>\n",
       "      <td>0.000200</td>\n",
       "      <td>8.395113e-06</td>\n",
       "      <td>0.003139</td>\n",
       "      <td>-0.000035</td>\n",
       "      <td>-3.648430e-06</td>\n",
       "      <td>1065.789429</td>\n",
       "      <td>1.000000e+12</td>\n",
       "      <td>13</td>\n",
       "      <td>99999</td>\n",
       "      <td>1</td>\n",
       "      <td>99999</td>\n",
       "      <td>36876</td>\n",
       "      <td>-333</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>688822 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            zeta         x            px         y        py         delta  \\\n",
       "0       0.000232 -0.000019 -8.914454e-07  0.003515 -0.000036 -7.982058e-06   \n",
       "1       0.000084 -0.000010 -1.840356e-07  0.002950 -0.000034 -1.590662e-06   \n",
       "2       0.000066 -0.000015 -6.052825e-07  0.003312 -0.000035 -8.177970e-07   \n",
       "3       0.000042  0.000041  6.820197e-07  0.001801  0.000005 -9.276438e-07   \n",
       "4       0.000069 -0.000015 -8.520024e-07  0.002821 -0.000034 -9.210257e-07   \n",
       "...          ...       ...           ...       ...       ...           ...   \n",
       "688817  0.002588  0.000623 -8.208530e-06  0.001870 -0.000030 -2.173463e-05   \n",
       "688818  0.000359  0.000377  9.015765e-06  0.003258 -0.000010 -4.060080e-06   \n",
       "688819  0.000536 -0.000154  5.146917e-06  0.002425 -0.000001 -3.916515e-06   \n",
       "688820  0.000579  0.000558  7.208487e-06  0.002203 -0.000031 -3.857645e-06   \n",
       "688821  0.000742  0.000200  8.395113e-06  0.003139 -0.000035 -3.648430e-06   \n",
       "\n",
       "             gamma0           p0c  this_turn  particle_id  this_state  \\\n",
       "0       1065.789429  1.000000e+12          2            0           1   \n",
       "1       1065.789429  1.000000e+12          2            1           1   \n",
       "2       1065.789429  1.000000e+12          2            2           1   \n",
       "3       1065.789429  1.000000e+12          1            4           1   \n",
       "4       1065.789429  1.000000e+12          2            4           1   \n",
       "...             ...           ...        ...          ...         ...   \n",
       "688817  1065.789429  1.000000e+12         29        99998           1   \n",
       "688818  1065.789429  1.000000e+12          6        99999           1   \n",
       "688819  1065.789429  1.000000e+12          9        99999           1   \n",
       "688820  1065.789429  1.000000e+12         10        99999           1   \n",
       "688821  1065.789429  1.000000e+12         13        99999           1   \n",
       "\n",
       "        parent_particle_id  at_element  state  at_turn  \n",
       "0                        0           0      1      200  \n",
       "1                        1       35613   -333       25  \n",
       "2                        2       37923   -333       36  \n",
       "3                        4       35613   -333       14  \n",
       "4                        4       35613   -333       14  \n",
       "...                    ...         ...    ...      ...  \n",
       "688817               99998       35613   -333       25  \n",
       "688818               99999       36876   -333       25  \n",
       "688819               99999       36876   -333       25  \n",
       "688820               99999       36876   -333       25  \n",
       "688821               99999       36876   -333       25  \n",
       "\n",
       "[688822 rows x 15 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tmp_TCCS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0438cf6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "688822 > 100000 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef23b1a0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e80958ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ParticleAnalysis_1():\n",
    "\n",
    "    def __init__(self, element_type, n_sigma, length, xdim, ydim, jaw_L, bend=None, align_angle = None, beam = 2, plane = 'V', p0c =6.8e12, ):\n",
    "\n",
    "        self.beam = beam\n",
    "        self.plane = plane\n",
    "        self.p0c = p0c\n",
    "        self.element_type = element_type\n",
    "        self.n_sigma = n_sigma\n",
    "        self.length = length\n",
    "        self.xdim = xdim\n",
    "        self.ydim = ydim\n",
    "        self.align_angle = align_angle\n",
    "        self.jaw_L = jaw_L\n",
    "        self.nturns = None\n",
    "        self.npart = None\n",
    "        self.data_dict = None\n",
    "        self.data = None\n",
    "        self.type = None\n",
    "        self.impact_part = None\n",
    "        self.abs_y_low = self.jaw_L\n",
    "        self.abs_y_up = self.jaw_L + self.ydim\n",
    "        self.abs_x_low = -self.xdim/2\n",
    "        self.abs_x_up = self.xdim/2   ### CORRECTED\n",
    "        \n",
    "        if element_type == 'crystal':\n",
    "            self.bend = bend \n",
    "            pot_crit_Si = 21.34 #16 #eV\n",
    "            en_crit_Si = 5.7e9 / 1e-2 #eV/m\n",
    "            #dp_Si = 1.92e-10 #m\n",
    "            xp_crit0 = np.sqrt(2.0*pot_crit_Si/p0c)\n",
    "            Rcrit = p0c/en_crit_Si\n",
    "            self.xp_crit = xp_crit0*(1-Rcrit/bend)\n",
    "            if(self.xp_crit < 0):\n",
    "                print(f\"!!!!!!!!!!!!! \\nERROR: particles at {self.p0c} cannot be channeled if bending is {self.bend} \\n!!!!!!!!!!!!!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a154003",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59263691",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "cc23cfb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_distributions(x, y, px, py, **kwargs):\n",
    "\n",
    "        fig1 = plt.figure( figsize=(22, 10))\n",
    "        ax1 = fig1.add_subplot(2,3,1)\n",
    "        ax1.hist(x, bins=100)\n",
    "        ax1.set_xlabel('x [mm]')\n",
    "        ax1.set_ylabel(\"\")\n",
    "        ax1.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "        ax2 = fig1.add_subplot(2,3,2)\n",
    "        ax2.hist(y, bins=100) \n",
    "        ax2.set_xlabel('y [mm]')\n",
    "        ax2.set_ylabel('')\n",
    "        \n",
    "        ax2.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax2.set_title(f'Total particles: {len(x)}')\n",
    "\n",
    "        ax3 = fig1.add_subplot(2,3,3)\n",
    "        h = ax3.hist2d(x, y, bins=100, norm=matplotlib.colors.LogNorm())#,  vmin = 1, vmax = 1e6, range = ([-40e-6, 40e-6], [-40e-6,40e-6])) \n",
    "        ax3.set_xlabel(r'x [mm]')\n",
    "        #ax3.set_ylim(0,0.008)\n",
    "        ax3.set_ylabel(r'y [mm]')\n",
    "        ax3.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax3.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.yticks()[0]])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        axins = inset_axes(ax3, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "        fig1.colorbar(h[3], cax=axins, orientation='vertical', label='Count (log scale)')\n",
    "        ax3.grid(linestyle=':')\n",
    "\n",
    "        ax12 = fig1.add_subplot(2,3,4)\n",
    "        ax12.hist(px, bins=100)\n",
    "        ax12.set_xlabel(r'px [$\\mu$rad]')\n",
    "        ax12.set_ylabel(\"\")\n",
    "        \n",
    "        ax12.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "\n",
    "        ax22 = fig1.add_subplot(2,3,5)\n",
    "        ax22.hist(py, bins=100) \n",
    "        ax22.set_xlabel(r'py [$\\mu$rad]')\n",
    "        ax22.set_ylabel('')\n",
    "        ax22.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "    \n",
    "\n",
    "        ax32 = fig1.add_subplot(2,3,6)\n",
    "        h2 = ax32.hist2d(px, py, bins=100, norm=matplotlib.colors.LogNorm())  #,, norm=matplotlib.colors.LogNorm() range = ([-40e-6, 40e-6], [-40e-6,40e-6])\n",
    "        ax32.set_xlabel(r'px [$\\mu$rad]')\n",
    "        ax32.set_ylabel(r'py [$\\mu$rad]')\n",
    "        ax32.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax32.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.yticks()[0]])\n",
    "        axins_2 = inset_axes(ax32, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "        fig1.colorbar(h2[3], cax=axins_2, orientation='vertical', label='Count (log scale)')\n",
    "        ax32.grid(linestyle=':')\n",
    "\n",
    "        if \"log\" in kwargs and kwargs['log'] == True:  \n",
    "            ax22.set_yscale(\"log\")\n",
    "            ax2.set_yscale(\"log\")\n",
    "            ax12.set_yscale(\"log\")\n",
    "            ax1.set_yscale(\"log\")\n",
    "\n",
    "\n",
    "        #fig1.suptitle('plot')\n",
    "        plt.show()\n",
    "        #return fig1, [ax1,ax2,ax3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4c8a7941",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1584x720 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_distributions(impact_part_df['x'], impact_part_df['y'], impact_part_df['px'], impact_part_df['py'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ff67bdb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
