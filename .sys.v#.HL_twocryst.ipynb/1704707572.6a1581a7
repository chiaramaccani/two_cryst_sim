{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "33b12567",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Packages pyspark or cern.nxcals are not installed. Data retrieval from NXCALS is not possible.\n",
      " If you are on SWAN and did not expect this warning, then restart and load the 'NXCals Pro' software stack.\n",
      "No pytransport functionality\n",
      "No pytransport functionality\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import os\n",
    "import subprocess\n",
    "\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import yaml\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "import lossmaps as lm\n",
    "import xobjects as xo\n",
    "\n",
    "import xtrack as xt\n",
    "import xcoll as xc\n",
    "\n",
    "import lossmaps as lm\n",
    "from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n",
    "\n",
    "import xarray as xr\n",
    "\n",
    "import json\n",
    "\n",
    "import xtrack as xt\n",
    "import xpart as xp\n",
    "import xobjects as xo\n",
    "\n",
    "\n",
    "import pickle \n",
    "import h5py\n",
    "import io\n",
    "import scipy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "359408ea",
   "metadata": {},
   "source": [
    "# Line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ef58df89",
   "metadata": {},
   "outputs": [],
   "source": [
    "class LineData():\n",
    "    \n",
    "    def __init__(self, run, # 'HL' or 'Run3'\n",
    "                 line_file_name, # = 'config_sim.yaml',\n",
    "                 coll_file_name, # = 'config_sim.yaml'\n",
    "                 TCCS_name = 'tccs.5r3.b2',\n",
    "                 TCCP_name = 'tccp.4l3.b2',\n",
    "                 TARGET_name = 'target.4l3.b2',\n",
    "                 TCCS_loc_b1 =  6773.7,\n",
    "                 TCCP_loc_b1 = 6653.3,\n",
    "                 beam = 2, plane = 'V', engine = 'everest', sigma_TCCS = None, sigma_TCCP = None,\n",
    "                 job_num_part = 100000, job_num_turns = 200, \n",
    "              ):\n",
    "\n",
    "        self.run = run\n",
    "        self.line_file = f\"{os.environ.get('HOME_TWOCRYST')}/{line_file_name}\"\n",
    "        self.coll_file = f\"{os.environ.get('HOME_TWOCRYST')}/{coll_file_name}\"\n",
    "        \n",
    "        self.TCCS_name = TCCS_name\n",
    "        self.TCCP_name = TCCP_name\n",
    "        self.TARGET_name = TARGET_name\n",
    "        self.TCLA_name = 'tcla.a5l3.b2'\n",
    "        self.TCCS_loc_b1 =  6773.7\n",
    "        self.TCCP_loc_b1 = 6653.3\n",
    "        self.TCCS_loc = None\n",
    "        self.TCCP_loc = None\n",
    "        self.TARGET_loc = None\n",
    "        self.TCLA_loc = None\n",
    "        self.idx_TCCS = None\n",
    "        self.idx_TCCP = None\n",
    "        self.idx_TARGET = None\n",
    "        \n",
    "        self.beam = beam\n",
    "        self.plane = plane\n",
    "        self.job_num_part = job_num_part\n",
    "        self.job_num_turns = job_num_turns\n",
    "        self.engine = engine\n",
    "        self.plane = plane\n",
    "        self.sigma_TCCS = sigma_TCCS\n",
    "        self.sigma_TCCP = sigma_TCCP\n",
    "        self.coll_dict = None\n",
    "        self.end_s = None\n",
    "        self.line = None\n",
    "        self.norm_emittance = None\n",
    "        self.emittance = None\n",
    "        \n",
    "        if self.run == 'Run3':\n",
    "            self.norm_emittance = 3.5e-6\n",
    "        if self.run == 'HL':\n",
    "            self.norm_emittance = 2.5e-6\n",
    "        \n",
    "    def load_colldb_new(self, filename):\n",
    "        with open(filename, \"r\") as infile:\n",
    "            coll_data_string = \"\"\n",
    "            family_settings = {}\n",
    "            family_types = {}\n",
    "            onesided = {}\n",
    "            tilted = {}\n",
    "            bend = {}\n",
    "            xdim = {}\n",
    "            ydim = {}\n",
    "\n",
    "            for l_no, line in enumerate(infile):\n",
    "                if line.startswith(\"#\"):\n",
    "                    continue  # Comment\n",
    "                if len(line.strip()) == 0:\n",
    "                    continue  # Empty line\n",
    "                sline = line.split()\n",
    "                if len(sline) < 6 or sline[0].lower() == \"crystal\" or sline[0].lower() == \"target\":\n",
    "                    if sline[0].lower() == \"nsig_fam\":\n",
    "                        family_settings[sline[1]] = sline[2]\n",
    "                        family_types[sline[1]] = sline[3]\n",
    "                    elif sline[0].lower() == \"onesided\":\n",
    "                        onesided[sline[1]] = int(sline[2])\n",
    "                    elif sline[0].lower() == \"tilted\":\n",
    "                        tilted[sline[1]] = [float(sline[2]), float(sline[3])]\n",
    "                    elif sline[0].lower() == \"crystal\":\n",
    "                        bend[sline[1]] = float(sline[2])\n",
    "                        xdim[sline[1]] = float(sline[3])\n",
    "                        ydim[sline[1]] = float(sline[4])\n",
    "                    elif sline[0].lower() == \"target\":\n",
    "                        xdim[sline[1]] = float(sline[2])\n",
    "                        ydim[sline[1]] = float(sline[3])\n",
    "                    elif sline[0].lower() == \"settings\":\n",
    "                        pass  # Acknowledge and ignore this line\n",
    "                    else:\n",
    "                        raise ValueError(f\"Unknown setting {line}\")\n",
    "                else:\n",
    "                    coll_data_string += line\n",
    "\n",
    "        names = [\"name\", \"opening\", \"material\", \"length\", \"angle\", \"offset\"]\n",
    "\n",
    "        df = pd.read_csv(io.StringIO(coll_data_string), delim_whitespace=True,\n",
    "                         index_col=False, skip_blank_lines=True, names=names)\n",
    "\n",
    "        df[\"angle\"] = df[\"angle\"] \n",
    "        df[\"name\"] = df[\"name\"].str.lower() # Make the names lowercase for easy processing\n",
    "        df[\"gap\"] = df[\"opening\"].apply(lambda s: float(family_settings.get(s, s)))\n",
    "        df[\"type\"] = df[\"opening\"].apply(lambda s: family_types.get(s, \"UNKNOWN\"))\n",
    "        df[\"side\"] = df[\"name\"].apply(lambda s: onesided.get(s, 0))\n",
    "        df[\"bend\"] = df[\"name\"].apply(lambda s: bend.get(s, 0))\n",
    "        df[\"xdim\"] = df[\"name\"].apply(lambda s: xdim.get(s, 0))\n",
    "        df[\"ydim\"] = df[\"name\"].apply(lambda s: ydim.get(s, 0))\n",
    "        df[\"tilt_left\"] = df[\"name\"].apply(lambda s: np.deg2rad(tilted.get(s, [0, 0])[0]))\n",
    "        df[\"tilt_right\"] = df[\"name\"].apply(lambda s: np.deg2rad(tilted.get(s, [0, 0])[1]))\n",
    "        df.rename(columns={\"opening\": \"family\"}, inplace=True)\n",
    "        df = df.set_index(\"name\").T\n",
    "\n",
    "        # Ensure the collimators marked as one-sided or tilted are actually defined\n",
    "        defined_set = set(df.columns) # The data fram was transposed so columns are names\n",
    "        onesided_set = set(onesided.keys())\n",
    "        tilted_set = set(tilted.keys())\n",
    "        if not onesided_set.issubset(defined_set):\n",
    "            different = onesided_set - defined_set\n",
    "            raise SystemExit('One-sided collimators not defined: {}'.format(\", \".join(different)))\n",
    "        if not tilted_set.issubset(defined_set):\n",
    "            different = tilted_set - defined_set\n",
    "            raise SystemExit('Tilted collimators not defined: {}'.format(\",\".join(different)))\n",
    "        return df.T\n",
    "\n",
    "\n",
    "    def find_axis_intercepts(self, x_coords, y_coords):\n",
    "        x_intercepts = []\n",
    "        y_intercepts = []\n",
    "\n",
    "        for i in range(len(x_coords)):\n",
    "            x1, y1 = x_coords[i], y_coords[i]\n",
    "            x2, y2 = x_coords[(i + 1) % len(x_coords)], y_coords[(i + 1) % len(y_coords)]\n",
    "\n",
    "            if x1 == x2:\n",
    "            # Vertical line, no y-intercept\n",
    "                y_intercept = 0.0 if x1 == x2 == 0.0 else None\n",
    "            else:\n",
    "                slope = (y2 - y1) / (x2 - x1)\n",
    "                y_intercept = y1 - (slope * x1)\n",
    "\n",
    "            if y1 == y2:\n",
    "            # Horizontal line, no x-intercept\n",
    "                x_intercept = 0.0 if y1 == y2 == 0.0 else None\n",
    "            else:\n",
    "                slope = (x2 - x1) / (y2 - y1)\n",
    "                x_intercept = x1 - (slope * y1)\n",
    "\n",
    "            # Check if the x-intercept is within the range of x1 and x2\n",
    "            if x_intercept is not None and (x1 <= x_intercept <= x2 or x2 <= x_intercept <= x1):\n",
    "                x_intercepts.append(x_intercept)\n",
    "\n",
    "            # Check if the y-intercept is within the range of y1 and y2\n",
    "            if y_intercept is not None and (y1 <= y_intercept <= y2 or y2 <= y_intercept <= y1):\n",
    "                y_intercepts.append(y_intercept)\n",
    "\n",
    "        return x_intercepts, y_intercepts\n",
    "\n",
    "\n",
    "\n",
    "    def find_bad_offset_apertures(self, line):\n",
    "        aperture_offsets = {}\n",
    "        for name, element in line.element_dict.items():\n",
    "            if 'offset' in name and element.__class__.__name__.startswith('XYShift'):\n",
    "                aper_name = name.split('_offset')[0]\n",
    "                aperture_offsets[aper_name] = (element.dx, element.dy)\n",
    "\n",
    "        bad_apers = {}\n",
    "        for ap_name, offset in aperture_offsets.items():\n",
    "            aperture_el = line.element_dict[ap_name]\n",
    "\n",
    "            cname= aperture_el.__class__.__name__\n",
    "            ap_dict = aperture_el.to_dict()\n",
    "\n",
    "            if cname == 'LimitEllipse':\n",
    "                x_min = -ap_dict['a']\n",
    "                x_max = ap_dict['a']\n",
    "                y_min = -ap_dict['b']\n",
    "                y_max = ap_dict['b']\n",
    "            elif cname == 'LimitRect':\n",
    "                x_min = ap_dict['min_x']\n",
    "                x_max = ap_dict['max_x']\n",
    "                y_min = ap_dict['min_y']\n",
    "                y_max = ap_dict['max_y']\n",
    "            elif cname == 'LimitRectEllipse':\n",
    "                x_min = -ap_dict['max_x']\n",
    "                x_max = ap_dict['max_x']\n",
    "                y_min = -ap_dict['max_y']\n",
    "                y_max = ap_dict['max_y']\n",
    "            elif cname == 'LimitRacetrack':\n",
    "                x_min = ap_dict['min_x']\n",
    "                x_max = ap_dict['max_x']\n",
    "                y_min = ap_dict['min_y']\n",
    "                y_max = ap_dict['max_y']\n",
    "            elif cname == 'LimitPolygon':\n",
    "                x_intercepts, y_intercepts = self.find_axis_intercepts(ap_dict['x_vertices'],\n",
    "                                                                ap_dict['y_vertices'])\n",
    "                x_min = min(x_intercepts)\n",
    "                x_max = max(x_intercepts)\n",
    "                y_min = min(y_intercepts)\n",
    "                y_max = max(y_intercepts)\n",
    "\n",
    "            tolerance = 5e-3\n",
    "            \"\"\"if (x_max - offset[0] < tolerance \n",
    "                or -x_min + offset[0] < tolerance \n",
    "                or y_max - offset[1] < tolerance \n",
    "                or -y_min + offset[1] < tolerance):\"\"\"\n",
    "            if (offset[0] -x_max > tolerance \n",
    "                or  -offset[0] + x_min > tolerance \n",
    "                or  offset[1] - y_max > tolerance \n",
    "                or  -offset[1] + y_min > tolerance ):\n",
    "                    bad_apers[ap_name] = (x_min, x_max, y_min, y_max, offset[0], offset[1])\n",
    "\n",
    "        return bad_apers\n",
    "\n",
    "        \n",
    "    def load_line(self):\n",
    "        \n",
    "        #TTCS_align_angle_step = run_dict['TTCS_align_angle_step']\n",
    "\n",
    "        #mode = run_dict['mode']\n",
    "        #print('\\nMode: ', mode, '\\n')\n",
    "\n",
    "        print('Input files:\\n', self.line_file, '\\n', self.coll_file, '\\n')\n",
    "\n",
    "        if self.coll_file.endswith('.yaml'):\n",
    "            with open(self.coll_file, 'r') as stream:\n",
    "                coll_dict = yaml.safe_load(stream)['collimators'][f'b{self.beam}']\n",
    "        if self.coll_file.endswith('.data'):\n",
    "            coll_dict = self.load_colldb_new(self.coll_file).to_dict('index')\n",
    "\n",
    "        context = xo.ContextCpu(omp_num_threads='auto')\n",
    "        self.coll_dict = coll_dict\n",
    "        \n",
    "        # Load Line in Xtrack\n",
    "        line = xt.Line.from_json(self.line_file)\n",
    "        self.end_s = line.get_length()\n",
    "        \n",
    "        self.TCCS_loc = self.end_s - self.TCCS_loc_b1 #6775\n",
    "        self.TCCP_loc = self.end_s - self.TCCP_loc_b1 #6655\n",
    "        self.TARGET_loc = self.end_s - (self.TCCP_loc_b1 + coll_dict[self.TCCP_name][\"length\"]/2 + coll_dict[self.TARGET_name][\"length\"]/2)\n",
    "        self.TCLA_loc = line.get_s_position()[line.element_names.index(self.TCLA_name)]\n",
    "\n",
    "        line.insert_element(at_s=self.TCCS_loc, element=xt.Marker(), name=self.TCCS_name)\n",
    "        line.insert_element(at_s=self.TCCS_loc, element=xt.LimitEllipse(a_squ=0.0016, b_squ=0.0016, a_b_squ=2.56e-06), name=self.TCCS_name+'_aper')\n",
    "        line.insert_element(at_s=self.TARGET_loc, element=xt.Marker(), name=self.TARGET_name)\n",
    "        line.insert_element(at_s=self.TARGET_loc, element=xt.LimitEllipse(a_squ=0.0016, b_squ=0.0016, a_b_squ=2.56e-06), name=self.TARGET_name+'_aper')\n",
    "        line.insert_element(at_s=self.TCCP_loc, element=xt.Marker(), name=self.TCCP_name)\n",
    "        line.insert_element(at_s=self.TCCP_loc, element=xt.LimitEllipse(a_squ=0.0016, b_squ=0.0016, a_b_squ=2.56e-06), name=self.TCCP_name+'_aper')\n",
    "\n",
    "        TCCS_monitor = xt.ParticlesMonitor(num_particles=self.job_num_part, start_at_turn=0, stop_at_turn=self.job_num_turns)\n",
    "        TARGET_monitor = xt.ParticlesMonitor(num_particles=self.job_num_part, start_at_turn=0, stop_at_turn=self.job_num_turns)\n",
    "        dx = 1e-11\n",
    "        line.insert_element(at_s = self.TCCS_loc - coll_dict[self.TCCS_name][\"length\"]/2 - dx, element=TCCS_monitor, name='TCCS_monitor')\n",
    "        line.insert_element(at_s = self.TARGET_loc - coll_dict[self.TARGET_name][\"length\"]/2 - dx, element=TARGET_monitor, name='TARGET_monitor')\n",
    "\n",
    "\n",
    "        \"\"\" bad_aper = self.find_bad_offset_apertures(line)\n",
    "        print('Bad apertures : ', bad_aper)\n",
    "        print('Replace bad apertures with Marker')\n",
    "        for name in bad_aper.keys():\n",
    "            line.element_dict[name] = xt.Marker()\n",
    "            print(name, line.get_s_position(name), line.element_dict[name])\n",
    "\n",
    "        # Aperture model check\n",
    "        print('\\nAperture model check on imported model:')\n",
    "        df_imported = line.check_aperture()\n",
    "        assert not np.any(df_imported.has_aperture_problem)\n",
    "\n",
    "\n",
    "        # Initialise collmanager\n",
    "        if self.coll_file.endswith('.yaml'):\n",
    "            coll_manager = xc.CollimatorManager.from_yaml(self.coll_file, line=line, beam=self.beam, _context=context, ignore_crystals=False)\n",
    "        elif self.coll_file.endswith('.data'):\n",
    "            coll_manager = xc.CollimatorManager.from_SixTrack(self.coll_file, line=line, _context=context, ignore_crystals=False, nemitt_x = 2.5e-6,  nemitt_y = 2.5e-6)\n",
    "            # switch on cavities\n",
    "            speed = line.particle_ref._xobject.beta0[0]*scipy.constants.c\n",
    "            harmonic_number = 35640\n",
    "            voltage = 12e6/len(line.get_elements_of_type(xt.Cavity)[1])\n",
    "            frequency = harmonic_number * speed /line.get_length()\n",
    "            for side in ['l', 'r']:\n",
    "                for cell in ['a','b','c','d']:\n",
    "                    line[f'acsca.{cell}5{side}4.b2'].voltage = voltage\n",
    "                    line[f'acsca.{cell}5{side}4.b2'].frequency = frequency\n",
    "\n",
    "        # Install collimators into line\n",
    "        if self.engine == 'everest':\n",
    "            coll_names = coll_manager.collimator_names\n",
    "            black_absorbers = [self.TARGET_name,]\n",
    "\n",
    "            everest_colls = [name for name in coll_names if name not in black_absorbers]\n",
    "            coll_manager.install_everest_collimators(names=everest_colls,verbose=True)\n",
    "            coll_manager.install_black_absorbers(names = black_absorbers, verbose=True)\n",
    "        else:\n",
    "            raise ValueError(f\"Unknown scattering engine {self.engine}!\")\n",
    "        \n",
    "        # Aperture model check\n",
    "        print('\\nAperture model check after introducing collimators:')\n",
    "        df_with_coll = line.check_aperture()\n",
    "        assert not np.any(df_with_coll.has_aperture_problem)\n",
    "      \n",
    "        # Build the tracker\n",
    "        coll_manager.build_tracker()\n",
    "\n",
    "        # Set the collimator openings based on the colldb,\n",
    "        # or manually override with the option gaps={collname: gap}\n",
    "        coll_manager.set_openings()\n",
    "\n",
    "        # Aperture model check\n",
    "        print('\\nAperture model check after introducing collimators:')\n",
    "        df_with_coll = line.check_aperture()\n",
    "        assert not np.any(df_with_coll.has_aperture_problem)\"\"\"\n",
    "        \n",
    "        self.line = line         \n",
    "        return\n",
    "    \n",
    "    def compute_sigma_element(self, element_name):\n",
    "        if self.line is None:\n",
    "            self.load_line()\n",
    "        twiss = self.line.twiss()\n",
    "        beta_y_optics = twiss['bety', element_name]\n",
    "        alfa_y_optics = twiss['alfy', element_name]\n",
    "        if self.emittance is None:\n",
    "            self.emittance_phy = self.norm_emittance/(self.line.particle_ref._xobject.beta0[0]*self.line.particle_ref._xobject.gamma0[0])\n",
    "        sigma = np.sqrt(self.emittance_phy*beta_y_optics)\n",
    "        return(sigma)\n",
    "    \n",
    "    def compute_crystals(self):\n",
    "        if self.line is None:\n",
    "            self.load_line()\n",
    "        self.idx_TCCS = self.line.element_names.index(self.TCCS_name)\n",
    "        self.idx_TARGET = self.line.element_names.index(self.TARGET_name)\n",
    "        self.idx_TCCP = self.line.element_names.index(self.TCCP_name)\n",
    "        \n",
    "        \"\"\"print(f\"\\n\\nParticleAnalysis(element_type=\\'crystal\\', n_sigma={self.coll_dict[self.TCCS_name]['gap']}, length={self.coll_dict[self.TCCS_name]['length']}, ydim={self.coll_dict[self.TCCS_name]['xdim']}, xdim={self.coll_dict[self.TCCS_name]['ydim']}, bend={self.coll_dict[self.TCCS_name]['bend']}, align_angle={self.line.elements[self.idx_TCCS].align_angle}, jaw_L={self.line.elements[self.idx_TCCS].jaw_L}), line_idx={self.idx_TCCS}\")\n",
    "        print(f\"ParticleAnalysis(element_type=\\'target\\', n_sigma={self.coll_dict[self.TARGET_name]['gap']}, length={self.coll_dict[self.TARGET_name]['length']}, ydim={self.coll_dict[self.TARGET_name]['xdim']}, xdim={self.coll_dict[self.TARGET_name]['ydim']}, jaw_L={self.line.elements[self.idx_TARGET].jaw_L}), line_idx={self.idx_TARGET}\")\n",
    "                print(f\"ParticleAnalysis(element_type=\\'crystal\\', n_sigma={self.coll_dict[self.TCCP_name]['gap']}, length={self.coll_dict[self.TCCP_name]['length']}, ydim={self.coll_dict[self.TCCP_name]['xdim']}, xdim={self.coll_dict[self.TCCP_name]['ydim']}, bend={self.coll_dict[self.TCCP_name]['bend']}, jaw_L={self.line.elements[self.idx_TCCP].jaw_L}), line_idx={self.idx_TCCP}\")\n",
    "            \"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "13a9b300",
   "metadata": {},
   "outputs": [],
   "source": [
    "line_test0 = LineData(run='HL', line_file_name = 'input_files/HL_IR7_rematched/b4_sequence_patched.json', \n",
    "                     coll_file_name = 'input_files/CollDB_HL_tight_b4.data')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e0cf68b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "line_test1 = LineData(run='HL', line_file_name = 'input_files/HL_IR7_IR3_rematched/b4_sequence_patched.json', \n",
    "                     coll_file_name = 'input_files/CollDB_HL_tight_b4.data')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6063648d",
   "metadata": {},
   "outputs": [],
   "source": [
    "line_test2 = LineData(run='Run3', line_file_name = 'input_files/flat_top_b2.json', \n",
    "                     coll_file_name = 'input_files/flat_top.yaml')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "7f556f7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input files:\n",
      " /eos/user/c/cmaccani/xsuite_sim/two_cryst_sim/input_files/HL_IR7_rematched/b4_sequence_patched.json \n",
      " /eos/user/c/cmaccani/xsuite_sim/two_cryst_sim/input_files/CollDB_HL_tight_b4.data \n",
      "\n",
      "Done loading line from dict.           \n"
     ]
    }
   ],
   "source": [
    "line_test0.compute_crystals()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "017df0e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "line_test0.idx_TARGET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c42780d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "line_test1.compute_crystals()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a75a094",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdf078d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "line_test2.compute_crystals()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c8aa112",
   "metadata": {},
   "source": [
    "# Particles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c1a95bbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def retreive_file_path(prefix_name, path = \"/eos/home-i04/c/cmaccani/xsuite_sim/two_cryst_sim/Condor/\"):\n",
    "\n",
    "    test_list = [path + i for i in os.listdir(path) if prefix_name in i]\n",
    "    for test_name in test_list:\n",
    "\n",
    "        n_jobs = int(subprocess.check_output(\"find \"+ test_name +\" -maxdepth 1 -mindepth 1 -type d | grep Job. | wc -l\", shell=True))\n",
    "\n",
    "        part_dfs =[]\n",
    "\n",
    "        for i in range(n_jobs):\n",
    "            file_path_part = (subprocess.check_output(\"echo \" + test_name + '/Job.' + str(i) + '/Outputdata/particle*.h5', shell=True)).decode('ascii').strip()\n",
    "            if os.path.exists(file_path_part):\n",
    "                part_dfs.append(file_path_part)\n",
    "\n",
    "        n_jobs_verify  = len(part_dfs)\n",
    "        if n_jobs != n_jobs_verify:\n",
    "            print(\"!!! Succesful Jobs: \", n_jobs_verify_TARGET, '/', n_jobs, ' in file: ', test_name)\n",
    "    return part_dfs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ef2f1da0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_7.7__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_8.2__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_8.7__target_absorber_20231222-1830\r\n",
      "TEST_IR7rem_TCCS_7.2__target_absorber_20231222-1824\r\n",
      "TEST_IR7rem_TCCS_7.7__target_absorber_20231222-1825\r\n",
      "TEST_IR7rem_TCCS_8.2__target_absorber_20231222-1826\r\n",
      "TEST_IR7rem_TCCS_8.7__target_absorber_20231222-1826\r\n",
      "TEST_NEW_SETUP__xsuite_20231215-2005\r\n"
     ]
    }
   ],
   "source": [
    "! ls ${HOME_TWOCRYST}/Condor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "e5880441",
   "metadata": {},
   "outputs": [],
   "source": [
    "job_name_IR3_IR7_7_2 = \"TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20231222-1829\"\n",
    "job_name_IR7_7_2 = \"TEST_IR7rem_TCCS_7.2__target_absorber_20231222-1824\"\n",
    "job_name_IR3_IR7_7_7 = \"TEST_IR3_IR7rem_TCCS_7.7__target_absorber_20231222-1829\"\n",
    "job_name_IR7_7_7 = \"TEST_IR7rem_TCCS_7.7__target_absorber_20231222-1825\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "edc4dac0",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'job_name_IR3_IR7_7_7' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_1051/1660225205.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mpath_IR3_IR7_7_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mretreive_file_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob_name_IR3_IR7_7_2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mpath_IR7_7_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mretreive_file_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob_name_IR7_7_2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mpath_IR3_IR7_7_7\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mretreive_file_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob_name_IR3_IR7_7_7\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mpath_IR7_7_7\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mretreive_file_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob_name_IR7_7_7\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'job_name_IR3_IR7_7_7' is not defined"
     ]
    }
   ],
   "source": [
    "path_IR3_IR7_7_2 = retreive_file_path(job_name_IR3_IR7_7_2)\n",
    "path_IR7_7_2 = retreive_file_path(job_name_IR7_7_2)\n",
    "path_IR3_IR7_7_7 = retreive_file_path(job_name_IR3_IR7_7_7)\n",
    "path_IR7_7_7 = retreive_file_path(job_name_IR7_7_7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "351c1601",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ParticleAnalysis():\n",
    "\n",
    "    def __init__(self, element_type, n_sigma, length, xdim, ydim, jaw_L, bend=None, align_angle = None, line_idx= None, \n",
    "                 beam = 2, plane = 'V',\n",
    "                 pot_crit = 21.34, #16 #eV Silicon\n",
    "                 en_crit = 5.7e9 / 1e-2 #eV/m Silicon    #dp_Si = 1.92e-10 #m\n",
    "                 ):\n",
    "\n",
    "        self.beam = beam\n",
    "        self.plane = plane\n",
    "        self.element_type = element_type\n",
    "        self.n_sigma = n_sigma\n",
    "        self.length = length\n",
    "        self.xdim = xdim\n",
    "        self.ydim = ydim\n",
    "        self.align_angle = align_angle\n",
    "        self.jaw_L = jaw_L\n",
    "        self.en_crit = en_crit\n",
    "        self.pot_crit = pot_crit\n",
    "        self.line_idx = line_idx\n",
    "        self.p0c = None\n",
    "        self.npart = None\n",
    "        self.data = None\n",
    "        self.impact_part = None\n",
    "        self.line_idx = line_idx\n",
    "        self.abs_y_low = self.jaw_L\n",
    "        self.abs_y_up = self.jaw_L + self.ydim\n",
    "        self.abs_x_low = -self.xdim/2\n",
    "        self.abs_x_up = self.ydim/2\n",
    "        \n",
    "        if element_type == 'crystal':\n",
    "            self.bend = bend \n",
    "\n",
    "    def load(self, h5_file_path, df_key = 'particles'):\n",
    "\n",
    "        if not hasattr(h5_file_path, '__iter__') or isinstance(h5_file_path, str):\n",
    "            h5_file_path = [h5_file_path]\n",
    "\n",
    "        df_particles = pd.DataFrame()\n",
    "        npart = 0\n",
    "\n",
    "        for file in h5_file_path:\n",
    "            try:\n",
    "                df_tmp = pd.read_hdf(file, key=df_key) #test_particles_B2V\n",
    "                df_tmp['particle_id'] = df_tmp['particle_id'] + npart    \n",
    "                df_tmp['parent_particle_id'] = df_tmp['parent_particle_id'] + npart \n",
    "                df_particles = pd.concat([df_particles, df_tmp])\n",
    "            except FileNotFoundError:\n",
    "                print(f\"Error: File not found at {file}\")\n",
    "                continue\n",
    "            except pd.errors.EmptyDataError:\n",
    "                print(f\"Error: The HDF5 file at {file} is empty.\")\n",
    "                continue\n",
    "            except Exception as e:\n",
    "                print(f\"Error: An unexpected error occurred - {e}\")\n",
    "                continue\n",
    "            npart = npart + len(df_tmp)\n",
    "        #check if there are duplicated     \n",
    "        data = df_particles['particle_id']\n",
    "        duplicated_mask = data.duplicated()\n",
    "        if len(data[duplicated_mask]) != 0:\n",
    "            print(f'There are repeated particle ids: {data[duplicated_mask]}')\n",
    "            \n",
    "        self.npart = npart       \n",
    "        self.data = df_particles\n",
    "            \n",
    "        p0c = None\n",
    "        if len(self.data['p0c'].unique()) == 1:\n",
    "            p0c = self.data['p0c'].unique()[0]\n",
    "        else:\n",
    "            print('There are particles at different energies')            \n",
    "        self.p0c = p0c\n",
    "        \n",
    "        if self.element_type == 'crystal':\n",
    "            xp_crit0 = np.sqrt(2.0*self.pot_crit/self.p0c)\n",
    "            Rcrit = self.p0c/self.en_crit\n",
    "            self.xp_crit = xp_crit0*(1-Rcrit/self.bend)\n",
    "            if(self.xp_crit < 0):\n",
    "                print(\"!!!!!!!!!!!!! \\nERROR: particles at\",self.p0c, f\"eV cannot be channeled if bending is {self.bend} m \\n!!!!!!!!!!!!!\")\n",
    "                \n",
    "        \n",
    "    def plot_distributions(self, x, y, px, py, **kwargs):\n",
    "\n",
    "        fig1 = plt.figure( figsize=(22, 10))\n",
    "        ax1 = fig1.add_subplot(2,3,1)\n",
    "        ax1.hist(x, bins=100)\n",
    "        ax1.set_xlabel('x [mm]')\n",
    "        ax1.set_ylabel(\"\")\n",
    "        ax1.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "        ax2 = fig1.add_subplot(2,3,2)\n",
    "        ax2.hist(y, bins=100) \n",
    "        ax2.set_xlabel('y [mm]')\n",
    "        ax2.set_ylabel('')\n",
    "        \n",
    "        ax2.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax2.set_title(f'Total particles: {len(x)}')\n",
    "\n",
    "        ax3 = fig1.add_subplot(2,3,3)\n",
    "        h = ax3.hist2d(x, y, bins=100, norm=matplotlib.colors.LogNorm())#,  vmin = 1, vmax = 1e6, range = ([-40e-6, 40e-6], [-40e-6,40e-6])) \n",
    "        ax3.set_xlabel(r'x [mm]')\n",
    "        #ax3.set_ylim(0,0.008)\n",
    "        ax3.set_ylabel(r'y [mm]')\n",
    "        ax3.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax3.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.yticks()[0]])\n",
    "        ax3_tw = ax3.twinx()\n",
    "        sigma_abs = self.jaw_L/self.n_sigma\n",
    "        ax3_tw.set_ylim(ax3.get_ylim()[0]/sigma_abs, ax3.get_ylim()[1]/sigma_abs)\n",
    "        yticks = np.arange(np.ceil(ax3_tw.get_ylim()[0]), np.floor(ax3_tw.get_ylim()[1]) + 1, 2)\n",
    "        ax3_tw.set_yticks(yticks)\n",
    "        ax3_tw.set_ylabel(r' n $\\sigma$')\n",
    "\n",
    "        if \"sigma\" in kwargs and kwargs['sigma'] == True:\n",
    "            ax3_tw.axhline(self.n_sigma, color = 'r', linestyle = '--')\n",
    "            #ax3_tw.text( 0,0, r'TCP $\\sigma$') #max(ax3.get_xticks())-1.5e-3, 4,\n",
    "\n",
    "        axins = inset_axes(ax3, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "        fig1.colorbar(h[3], cax=axins, orientation='vertical', label='Count (log scale)')\n",
    "        ax3.grid(linestyle=':')\n",
    "\n",
    "        ax12 = fig1.add_subplot(2,3,4)\n",
    "        ax12.hist(px, bins=100)\n",
    "        ax12.set_xlabel(r'px [$\\mu$rad]')\n",
    "        ax12.set_ylabel(\"\")\n",
    "        \n",
    "        ax12.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "\n",
    "        ax22 = fig1.add_subplot(2,3,5)\n",
    "        ax22.hist(py, bins=100) \n",
    "        ax22.set_xlabel(r'py [$\\mu$rad]')\n",
    "        ax22.set_ylabel('')\n",
    "        ax22.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "        if self.element_type == 'crystal' and \"xpcrit\" in kwargs and kwargs['xpcrit'] == True:   \n",
    "            mean_angle = None\n",
    "            if self.align_angle is None and \"py_mean\" in kwargs:\n",
    "                mean_angle = kwargs['py_mean']\n",
    "            elif self.align_angle is not None:\n",
    "                mean_angle = self.align_angle\n",
    "            elif \"calculate_mean\" in kwargs and kwargs['calculate_mean'] == True:\n",
    "                mean_angle = self.calculate_mean_py(**kwargs)\n",
    "             \n",
    "            if mean_angle is not None: \n",
    "                ax22.axvline(mean_angle, color = 'red', linestyle = '-', alpha = 0.8)\n",
    "                if(self.xp_crit < 0):\n",
    "                    print(f\"!!!!!!!!!!!!! \\nERROR: particles at {self.p0c} cannot be channeled if bending is {self.bend} \\n!!!!!!!!!!!!!\")\n",
    "                else:\n",
    "                    ax22.axvline(mean_angle  + np.abs(self.xp_crit), color = 'red', linestyle = '--', alpha = 0.9)\n",
    "                    ax22.axvline(mean_angle - np.abs(self.xp_crit), color = 'red', linestyle = '--', alpha = 0.9)\n",
    "                    chann_mask = (py > mean_angle  - np.abs(self.xp_crit)) & (py < mean_angle  + np.abs(self.xp_crit))\n",
    "                    chann = len(py[chann_mask])\n",
    "                    ax22.set_title(f'N particle inside critical angle range: {chann}')\n",
    "\n",
    "        ax32 = fig1.add_subplot(2,3,6)\n",
    "        h2 = ax32.hist2d(px, py, bins=100, norm=matplotlib.colors.LogNorm())  #,, norm=matplotlib.colors.LogNorm() range = ([-40e-6, 40e-6], [-40e-6,40e-6])\n",
    "        ax32.set_xlabel(r'px [$\\mu$rad]')\n",
    "        ax32.set_ylabel(r'py [$\\mu$rad]')\n",
    "        ax32.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax32.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.yticks()[0]])\n",
    "        axins_2 = inset_axes(ax32, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "        fig1.colorbar(h2[3], cax=axins_2, orientation='vertical', label='Count (log scale)')\n",
    "        ax32.grid(linestyle=':')\n",
    "\n",
    "        if \"log\" in kwargs and kwargs['log'] == True:  \n",
    "            ax22.set_yscale(\"log\")\n",
    "            ax2.set_yscale(\"log\")\n",
    "            ax12.set_yscale(\"log\")\n",
    "            ax1.set_yscale(\"log\")\n",
    "\n",
    "\n",
    "        #fig1.suptitle('plot')\n",
    "        plt.show()\n",
    "        #return fig1, [ax1,ax2,ax3]\n",
    "        \n",
    "        \n",
    "    def compute_impact_particles(self, **kwargs):\n",
    "        if self.data is None:\n",
    "            self.load(kwargs['h5_file_path'])\n",
    "        self.impact_part = self.data[(self.data.at_element == self.line_idx) & (self.data.state<0)]\n",
    "        print(\"Impacting particles: \", len(self.impact_part), \"\\t /\", self.npart)\n",
    "        self.plot_distributions(self.impact_part['x'], self.impact_part['y'], self.impact_part['px'], self.impact_part['py'] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c89e7122",
   "metadata": {},
   "outputs": [],
   "source": [
    "IR3_IR7_7_7 = ParticleAnalysis(element_type='target', n_sigma=42.6, length=0.005, ydim=0.002, xdim=0.004, jaw_L=0.013086466664922941, line_idx=110984)\n",
    "IR7_7_7 = ParticleAnalysis(element_type='target', n_sigma=42.6, length=0.005, ydim=0.002, xdim=0.004, jaw_L=0.013086466664922941, line_idx=110984)\n",
    "#test = ParticleAnalysis(element_type='crystal', n_sigma=5.0, length=0.004, ydim=0.002, xdim=0.035, bend=80.0, align_angle=-1.1763616021881982e-05, jaw_L=0.0016912979598174786)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c90a1475",
   "metadata": {},
   "outputs": [],
   "source": [
    "IR3_IR7_7_7.load(path_IR3_IR7_7_7)\n",
    "IR7_7_7.load(path_IR7_7_7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1cf0500c",
   "metadata": {},
   "outputs": [],
   "source": [
    "IR3_IR7_7_7.data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e1381b50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Impacting particles:  18 \t / 10000000\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1584x720 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_tracking_at_element</th>\n",
       "      <th>s</th>\n",
       "      <th>zeta</th>\n",
       "      <th>particle_id</th>\n",
       "      <th>at_element</th>\n",
       "      <th>at_turn</th>\n",
       "      <th>state</th>\n",
       "      <th>parent_particle_id</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>px</th>\n",
       "      <th>py</th>\n",
       "      <th>delta</th>\n",
       "      <th>p0c</th>\n",
       "      <th>gamma0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17367</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.033574</td>\n",
       "      <td>595667</td>\n",
       "      <td>110984</td>\n",
       "      <td>126</td>\n",
       "      <td>-340</td>\n",
       "      <td>595667</td>\n",
       "      <td>-0.001159</td>\n",
       "      <td>0.013178</td>\n",
       "      <td>-1.339311e-05</td>\n",
       "      <td>0.000165</td>\n",
       "      <td>-0.001664</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49671</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.002087</td>\n",
       "      <td>583619</td>\n",
       "      <td>110984</td>\n",
       "      <td>25</td>\n",
       "      <td>-340</td>\n",
       "      <td>583619</td>\n",
       "      <td>0.008092</td>\n",
       "      <td>0.021199</td>\n",
       "      <td>-7.669571e-05</td>\n",
       "      <td>0.000276</td>\n",
       "      <td>-0.011050</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77543</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.013140</td>\n",
       "      <td>945966</td>\n",
       "      <td>110984</td>\n",
       "      <td>11</td>\n",
       "      <td>-340</td>\n",
       "      <td>945966</td>\n",
       "      <td>-0.002413</td>\n",
       "      <td>0.015545</td>\n",
       "      <td>1.103825e-05</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>-0.003508</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17571</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.006977</td>\n",
       "      <td>2190335</td>\n",
       "      <td>110984</td>\n",
       "      <td>128</td>\n",
       "      <td>-340</td>\n",
       "      <td>2190335</td>\n",
       "      <td>0.006750</td>\n",
       "      <td>0.016127</td>\n",
       "      <td>-6.142154e-05</td>\n",
       "      <td>0.000208</td>\n",
       "      <td>-0.000058</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31424</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.006950</td>\n",
       "      <td>2307293</td>\n",
       "      <td>110984</td>\n",
       "      <td>48</td>\n",
       "      <td>-340</td>\n",
       "      <td>2307293</td>\n",
       "      <td>0.000624</td>\n",
       "      <td>0.013572</td>\n",
       "      <td>-2.351285e-05</td>\n",
       "      <td>0.000170</td>\n",
       "      <td>-0.000077</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25228</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.026385</td>\n",
       "      <td>2878766</td>\n",
       "      <td>110984</td>\n",
       "      <td>64</td>\n",
       "      <td>-340</td>\n",
       "      <td>2878766</td>\n",
       "      <td>-0.005061</td>\n",
       "      <td>0.013430</td>\n",
       "      <td>1.300426e-05</td>\n",
       "      <td>0.000184</td>\n",
       "      <td>-0.004814</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88628</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.001517</td>\n",
       "      <td>2846642</td>\n",
       "      <td>110984</td>\n",
       "      <td>8</td>\n",
       "      <td>-340</td>\n",
       "      <td>2846642</td>\n",
       "      <td>0.000745</td>\n",
       "      <td>0.015596</td>\n",
       "      <td>-1.029267e-05</td>\n",
       "      <td>0.000202</td>\n",
       "      <td>-0.000037</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95927</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.000019</td>\n",
       "      <td>3465147</td>\n",
       "      <td>110984</td>\n",
       "      <td>0</td>\n",
       "      <td>-340</td>\n",
       "      <td>3465147</td>\n",
       "      <td>-0.002021</td>\n",
       "      <td>0.016223</td>\n",
       "      <td>3.067990e-05</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>-0.116562</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59815</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.002972</td>\n",
       "      <td>3593634</td>\n",
       "      <td>110984</td>\n",
       "      <td>22</td>\n",
       "      <td>-340</td>\n",
       "      <td>3593634</td>\n",
       "      <td>0.003127</td>\n",
       "      <td>0.013324</td>\n",
       "      <td>-3.194429e-05</td>\n",
       "      <td>0.000169</td>\n",
       "      <td>-0.000077</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77345</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.000856</td>\n",
       "      <td>3503400</td>\n",
       "      <td>110984</td>\n",
       "      <td>11</td>\n",
       "      <td>-340</td>\n",
       "      <td>3503400</td>\n",
       "      <td>0.000615</td>\n",
       "      <td>0.013352</td>\n",
       "      <td>-1.047004e-05</td>\n",
       "      <td>0.000167</td>\n",
       "      <td>-0.000101</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66184</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.030585</td>\n",
       "      <td>5562948</td>\n",
       "      <td>110984</td>\n",
       "      <td>14</td>\n",
       "      <td>-340</td>\n",
       "      <td>5562948</td>\n",
       "      <td>-0.001411</td>\n",
       "      <td>0.016680</td>\n",
       "      <td>-8.820517e-05</td>\n",
       "      <td>0.000218</td>\n",
       "      <td>-0.036244</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49822</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.010739</td>\n",
       "      <td>5687293</td>\n",
       "      <td>110984</td>\n",
       "      <td>25</td>\n",
       "      <td>-340</td>\n",
       "      <td>5687293</td>\n",
       "      <td>-0.005731</td>\n",
       "      <td>0.013869</td>\n",
       "      <td>1.020908e-04</td>\n",
       "      <td>0.000160</td>\n",
       "      <td>-0.004440</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40416</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.002247</td>\n",
       "      <td>6341072</td>\n",
       "      <td>110984</td>\n",
       "      <td>33</td>\n",
       "      <td>-340</td>\n",
       "      <td>6341072</td>\n",
       "      <td>0.000929</td>\n",
       "      <td>0.013305</td>\n",
       "      <td>-1.351336e-05</td>\n",
       "      <td>0.000167</td>\n",
       "      <td>-0.000185</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77565</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.000432</td>\n",
       "      <td>6332002</td>\n",
       "      <td>110984</td>\n",
       "      <td>11</td>\n",
       "      <td>-340</td>\n",
       "      <td>6332002</td>\n",
       "      <td>-0.004428</td>\n",
       "      <td>0.016935</td>\n",
       "      <td>3.639247e-05</td>\n",
       "      <td>0.000220</td>\n",
       "      <td>-0.000434</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21637</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.002422</td>\n",
       "      <td>7150921</td>\n",
       "      <td>110984</td>\n",
       "      <td>78</td>\n",
       "      <td>-340</td>\n",
       "      <td>7150921</td>\n",
       "      <td>-0.000036</td>\n",
       "      <td>0.019968</td>\n",
       "      <td>-2.132964e-06</td>\n",
       "      <td>0.000261</td>\n",
       "      <td>-0.002301</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22836</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.003235</td>\n",
       "      <td>7652191</td>\n",
       "      <td>110984</td>\n",
       "      <td>75</td>\n",
       "      <td>-340</td>\n",
       "      <td>7652191</td>\n",
       "      <td>-0.000624</td>\n",
       "      <td>0.019452</td>\n",
       "      <td>4.377555e-07</td>\n",
       "      <td>0.000249</td>\n",
       "      <td>-0.029506</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16270</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.017415</td>\n",
       "      <td>8898181</td>\n",
       "      <td>110984</td>\n",
       "      <td>165</td>\n",
       "      <td>-340</td>\n",
       "      <td>8898181</td>\n",
       "      <td>-0.000320</td>\n",
       "      <td>0.013146</td>\n",
       "      <td>-4.490522e-06</td>\n",
       "      <td>0.000166</td>\n",
       "      <td>-0.000047</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28058</th>\n",
       "      <td>-1</td>\n",
       "      <td>20005.542969</td>\n",
       "      <td>0.002457</td>\n",
       "      <td>8964107</td>\n",
       "      <td>110984</td>\n",
       "      <td>54</td>\n",
       "      <td>-340</td>\n",
       "      <td>8964107</td>\n",
       "      <td>-0.002824</td>\n",
       "      <td>0.019793</td>\n",
       "      <td>2.076352e-05</td>\n",
       "      <td>0.000259</td>\n",
       "      <td>-0.000062</td>\n",
       "      <td>7.000000e+12</td>\n",
       "      <td>7460.522461</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       start_tracking_at_element             s      zeta  particle_id  \\\n",
       "17367                         -1  20005.542969  0.033574       595667   \n",
       "49671                         -1  20005.542969  0.002087       583619   \n",
       "77543                         -1  20005.542969  0.013140       945966   \n",
       "17571                         -1  20005.542969  0.006977      2190335   \n",
       "31424                         -1  20005.542969  0.006950      2307293   \n",
       "25228                         -1  20005.542969  0.026385      2878766   \n",
       "88628                         -1  20005.542969  0.001517      2846642   \n",
       "95927                         -1  20005.542969  0.000019      3465147   \n",
       "59815                         -1  20005.542969  0.002972      3593634   \n",
       "77345                         -1  20005.542969  0.000856      3503400   \n",
       "66184                         -1  20005.542969  0.030585      5562948   \n",
       "49822                         -1  20005.542969  0.010739      5687293   \n",
       "40416                         -1  20005.542969  0.002247      6341072   \n",
       "77565                         -1  20005.542969  0.000432      6332002   \n",
       "21637                         -1  20005.542969  0.002422      7150921   \n",
       "22836                         -1  20005.542969  0.003235      7652191   \n",
       "16270                         -1  20005.542969  0.017415      8898181   \n",
       "28058                         -1  20005.542969  0.002457      8964107   \n",
       "\n",
       "       at_element  at_turn  state  parent_particle_id         x         y  \\\n",
       "17367      110984      126   -340              595667 -0.001159  0.013178   \n",
       "49671      110984       25   -340              583619  0.008092  0.021199   \n",
       "77543      110984       11   -340              945966 -0.002413  0.015545   \n",
       "17571      110984      128   -340             2190335  0.006750  0.016127   \n",
       "31424      110984       48   -340             2307293  0.000624  0.013572   \n",
       "25228      110984       64   -340             2878766 -0.005061  0.013430   \n",
       "88628      110984        8   -340             2846642  0.000745  0.015596   \n",
       "95927      110984        0   -340             3465147 -0.002021  0.016223   \n",
       "59815      110984       22   -340             3593634  0.003127  0.013324   \n",
       "77345      110984       11   -340             3503400  0.000615  0.013352   \n",
       "66184      110984       14   -340             5562948 -0.001411  0.016680   \n",
       "49822      110984       25   -340             5687293 -0.005731  0.013869   \n",
       "40416      110984       33   -340             6341072  0.000929  0.013305   \n",
       "77565      110984       11   -340             6332002 -0.004428  0.016935   \n",
       "21637      110984       78   -340             7150921 -0.000036  0.019968   \n",
       "22836      110984       75   -340             7652191 -0.000624  0.019452   \n",
       "16270      110984      165   -340             8898181 -0.000320  0.013146   \n",
       "28058      110984       54   -340             8964107 -0.002824  0.019793   \n",
       "\n",
       "                 px        py     delta           p0c       gamma0  \n",
       "17367 -1.339311e-05  0.000165 -0.001664  7.000000e+12  7460.522461  \n",
       "49671 -7.669571e-05  0.000276 -0.011050  7.000000e+12  7460.522461  \n",
       "77543  1.103825e-05  0.000193 -0.003508  7.000000e+12  7460.522461  \n",
       "17571 -6.142154e-05  0.000208 -0.000058  7.000000e+12  7460.522461  \n",
       "31424 -2.351285e-05  0.000170 -0.000077  7.000000e+12  7460.522461  \n",
       "25228  1.300426e-05  0.000184 -0.004814  7.000000e+12  7460.522461  \n",
       "88628 -1.029267e-05  0.000202 -0.000037  7.000000e+12  7460.522461  \n",
       "95927  3.067990e-05  0.000193 -0.116562  7.000000e+12  7460.522461  \n",
       "59815 -3.194429e-05  0.000169 -0.000077  7.000000e+12  7460.522461  \n",
       "77345 -1.047004e-05  0.000167 -0.000101  7.000000e+12  7460.522461  \n",
       "66184 -8.820517e-05  0.000218 -0.036244  7.000000e+12  7460.522461  \n",
       "49822  1.020908e-04  0.000160 -0.004440  7.000000e+12  7460.522461  \n",
       "40416 -1.351336e-05  0.000167 -0.000185  7.000000e+12  7460.522461  \n",
       "77565  3.639247e-05  0.000220 -0.000434  7.000000e+12  7460.522461  \n",
       "21637 -2.132964e-06  0.000261 -0.002301  7.000000e+12  7460.522461  \n",
       "22836  4.377555e-07  0.000249 -0.029506  7.000000e+12  7460.522461  \n",
       "16270 -4.490522e-06  0.000166 -0.000047  7.000000e+12  7460.522461  \n",
       "28058  2.076352e-05  0.000259 -0.000062  7.000000e+12  7460.522461  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IR3_IR7_7_2.compute_impact_particles()\n",
    "IR3_IR7_7_2.impact_part\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a600d5fa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba10de14",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8d6089e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d177a4da",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5aac6348",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffb2661e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "433b7088",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eef7d75a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef23b1a0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d692da94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lossmap_B2V.json  TARGET_monitor_B2V_xsuite.pkl  TCCS_monitor_B2V_xsuite.pkl\r\n"
     ]
    }
   ],
   "source": [
    "! ls /eos/home-i04/c/cmaccani/xsuite_sim/old_bjorn_data/Condor/TEST__xsuite_20231208-1614/Job.0/Outputdata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "039343ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "file = '/eos/home-i04/c/cmaccani/xsuite_sim/old_bjorn_data/Condor/TEST__xsuite_20231208-1614/Job.0/Outputdata/TCCS_monitor_B2V_xsuite.pkl'\n",
    "with open(file, 'rb') as f:\n",
    "    loaded_dict = pickle.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6bad6803",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(loaded_dict['data'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0091e208",
   "metadata": {},
   "outputs": [],
   "source": [
    "float_variables = ['zeta', 'x', 'px', 'y', 'py', 'delta']\n",
    "int_variables = ['at_turn', 'particle_id','state', 'parent_particle_id']\n",
    "variables = np.concatenate((float_variables,int_variables ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b43703b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#zeta, x, px, y, py, delta, at_turn, particle_id, state, parent_particle_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "68c1058f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['zeta', 'x', 'px', 'y', 'py', 'delta', 'at_turn', 'particle_id',\n",
       "       'state', 'parent_particle_id'], dtype='<U18')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9897de31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'zeta': array([[4.65148166e-05, 1.39206476e-04, 2.32250451e-04, ...,\n",
       "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
       "        [1.69841214e-05, 5.18077851e-05, 8.40795241e-05, ...,\n",
       "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
       "        [1.34276891e-05, 3.98750973e-05, 6.60266237e-05, ...,\n",
       "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
       "        ...,\n",
       "        [4.97142410e-05, 1.72538870e-04, 2.99810195e-04, ...,\n",
       "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
       "        [2.32071428e-05, 6.96998973e-05, 1.03991700e-04, ...,\n",
       "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n",
       "        [3.36524352e-05, 9.94024885e-05, 1.33754155e-04, ...,\n",
       "         0.00000000e+00, 0.00000000e+00, 0.00000000e+00]]),\n",
       " 'x': array([[-7.07837132e-06,  3.45976130e-05, -1.89438566e-05, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [-4.12341557e-06, -9.17513471e-06, -9.97188030e-06, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [-1.47749957e-05,  2.08615651e-05, -1.53062865e-05, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        ...,\n",
       "        [-4.56787403e-06,  2.41537639e-04, -5.71347143e-05, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [-8.58714284e-06, -1.27640356e-04,  2.76371414e-05, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [ 8.19803375e-06, -5.35485323e-04,  1.41610145e-04, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00]]),\n",
       " 'px': array([[ 8.90516902e-08,  4.08794108e-07, -8.91445382e-07, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [-2.24180263e-07,  6.96258128e-08, -1.84035612e-07, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [ 3.44800782e-08,  4.71039112e-07, -6.05282489e-07, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        ...,\n",
       "        [ 1.65028069e-06,  2.44593075e-06, -3.88704058e-06, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [-1.82338735e-06, -1.06302960e-06,  1.65624183e-06, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [-6.82844915e-06, -5.22786646e-06,  7.85125118e-06, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00]]),\n",
       " 'y': array([[-0.00429464,  0.00097886,  0.00351504, ...,  0.        ,\n",
       "          0.        ,  0.        ],\n",
       "        [-0.00436058,  0.00165107,  0.00294997, ...,  0.        ,\n",
       "          0.        ,  0.        ],\n",
       "        [-0.00431899,  0.00121967,  0.00331211, ...,  0.        ,\n",
       "          0.        ,  0.        ],\n",
       "        ...,\n",
       "        [ 0.00441418, -0.00256218, -0.00217817, ...,  0.        ,\n",
       "          0.        ,  0.        ],\n",
       "        [ 0.00432417, -0.00131589, -0.00325573, ...,  0.        ,\n",
       "          0.        ,  0.        ],\n",
       "        [ 0.00431157, -0.0012217 , -0.00333377, ...,  0.        ,\n",
       "          0.        ,  0.        ]]),\n",
       " 'py': array([[ 2.53171584e-05,  1.18805052e-05, -3.58974060e-05, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [ 2.90666085e-05,  6.08699815e-06, -3.41508240e-05, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [ 2.66618250e-05,  9.79834899e-06, -3.52683540e-05, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        ...,\n",
       "        [-3.25977765e-05,  1.71383222e-06,  3.17842742e-05, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [-2.71387898e-05, -9.03414797e-06,  3.50708884e-05, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [-2.66320578e-05, -9.77979538e-06,  3.51844214e-05, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00]]),\n",
       " 'delta': array([[-8.01722545e-06, -8.00428005e-06, -7.98205805e-06, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [-1.60354481e-06, -1.59874406e-06, -1.59066161e-06, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [-8.27861629e-07, -8.24112921e-07, -8.17797022e-07, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        ...,\n",
       "        [-8.94413861e-06, -1.12804438e-05, -1.12520672e-05, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [-2.67104937e-06, -2.66478650e-06, -2.65464282e-06, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [-4.19424826e-06, -4.18593639e-06, -4.17239815e-06, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00]]),\n",
       " 'at_turn': array([[0, 1, 2, ..., 0, 0, 0],\n",
       "        [0, 1, 2, ..., 0, 0, 0],\n",
       "        [0, 1, 2, ..., 0, 0, 0],\n",
       "        ...,\n",
       "        [0, 1, 2, ..., 0, 0, 0],\n",
       "        [0, 1, 2, ..., 0, 0, 0],\n",
       "        [0, 1, 2, ..., 0, 0, 0]]),\n",
       " 'particle_id': array([[    0,     0,     0, ...,     0,     0,     0],\n",
       "        [    1,     1,     1, ...,     0,     0,     0],\n",
       "        [    2,     2,     2, ...,     0,     0,     0],\n",
       "        ...,\n",
       "        [99997, 99997, 99997, ...,     0,     0,     0],\n",
       "        [99998, 99998, 99998, ...,     0,     0,     0],\n",
       "        [99999, 99999, 99999, ...,     0,     0,     0]]),\n",
       " 'state': array([[1, 1, 1, ..., 0, 0, 0],\n",
       "        [1, 1, 1, ..., 0, 0, 0],\n",
       "        [1, 1, 1, ..., 0, 0, 0],\n",
       "        ...,\n",
       "        [1, 1, 1, ..., 0, 0, 0],\n",
       "        [1, 1, 1, ..., 0, 0, 0],\n",
       "        [1, 1, 1, ..., 0, 0, 0]]),\n",
       " 'parent_particle_id': array([[    0,     0,     0, ...,     0,     0,     0],\n",
       "        [    1,     1,     1, ...,     0,     0,     0],\n",
       "        [    2,     2,     2, ...,     0,     0,     0],\n",
       "        ...,\n",
       "        [99997, 99997, 99997, ...,     0,     0,     0],\n",
       "        [99998, 99998, 99998, ...,     0,     0,     0],\n",
       "        [99999, 99999, 99999, ...,     0,     0,     0]])}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var_dict = {}\n",
    "for var in variables:\n",
    "    new_arr = np.array(df[var])\n",
    "    new_arr = new_arr.reshape((100000, 200))\n",
    "    var_dict[var] = new_arr\n",
    "var_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "518e0df7",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'np' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_564/2630918441.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0marr_big_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparticle_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0marr_big_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marr_big_id\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m200\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0marr_big_x\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mat_turn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0marr_big_x\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marr_big_x\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m200\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0marr_big_x\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'np' is not defined"
     ]
    }
   ],
   "source": [
    "arr_big_id = np.array(df.particle_id)\n",
    "arr_big_id = arr_big_id.reshape((100000, 200))\n",
    "arr_big_x = np.array(df.at_turn)\n",
    "arr_big_x = arr_big_x.reshape((100000, 200))\n",
    "arr_big_x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5b128f3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [ 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,2 ,2 ,2\n",
    " ,2 ,2 ,2 ,2 ,2 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4\n",
    " ,4 ,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,6 ,7 ,7\n",
    " ,7 ,7 ,7 ,7 ,7 ,7 ,7 ,7 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,9 ,9 ,9 ,9 ,9 ,9\n",
    " ,9 ,9 ,9 ,9 ,10 ,10 ,10 ,10 ,10 ,10 ,10 ,10 ,10 ,10 ,11 ,11 ,11 ,11 ,11 ,11 ,11 ,11 ,0 ,0\n",
    " ,12 ,12 ,12 ,12 ,12 ,12 ,12 ,12 ,12 ,12 ,13 ,13 ,13 ,13 ,13 ,13 ,13 ,13 ,13 ,13 ,14 ,14 ,14 ,14\n",
    " ,14 ,14 ,14 ,14 ,14 ,14 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,16 ,16 ,16 ,16 ,16 ,16 ,16 ,16\n",
    " ,16 ,16 ,17 ,17 ,17 ,17 ,17 ,17 ,17 ,17 ,17 ,17 ,18 ,18 ,18 ,18 ,18 ,18 ,18 ,18 ,18 ,18 ,19 ,19\n",
    " ,19 ,19 ,19 ,19 ,19 ,19 ,19 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,21 ,21 ,21 ,21 ,21 ,21\n",
    " ,21 ,21 ,21 ,21 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,23 ,23 ,23 ,23 ,23 ,23 ,23 ,23 ,0 ,0\n",
    " ,24 ,24 ,24 ,24 ,24 ,24 ,24 ,24 ,24 ,24 ,25 ,25 ,25 ,25 ,25 ,25 ,25 ,25 ,25 ,25 ,26 ,26 ,26 ,26\n",
    " ,26 ,26 ,26 ,26 ,26 ,26 ,27 ,27 ,27 ,27 ,27 ,27 ,27 ,27 ,27 ,27 ,28 ,28 ,28 ,28 ,28 ,28 ,28 ,28\n",
    " ,28 ,28 ,29 ,29 ,29 ,29 ,29 ,29 ,29 ,29 ,29 ,29 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,31 ,31\n",
    " ,31 ,31 ,31 ,31 ,31 ,31 ,31 ,31 ,32 ,32 ,32 ,32 ,32 ,32 ,32 ,32 ,32 ,32 ,33 ,33 ,33 ,33 ,33 ,33\n",
    " ,33 ,33 ,33 ,33 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,34 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0\n",
    " ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,38 ,38 ,38 ,38\n",
    " ,38 ,38 ,38 ,38 ,38 ,38 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40\n",
    " ,0 ,0 ,41 ,41 ,41 ,41 ,41 ,41 ,41 ,41 ,0 ,0 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,43 ,43\n",
    " ,43 ,43 ,43 ,43 ,43 ,43 ,43 ,43 ,44 ,44 ,44 ,44 ,44 ,44 ,44 ,44 ,0 ,0 ,45 ,45 ,45 ,45 ,45 ,45\n",
    " ,45 ,45 ,0 ,0 ,46 ,46 ,46 ,46 ,46 ,46 ,46 ,46 ,46 ,46 ,47 ,47 ,47 ,47 ,47 ,47 ,47 ,47 ,0 ,0\n",
    " ,48 ,48 ,48 ,48 ,48 ,48 ,48 ,48 ,48 ,48 ,49 ,49 ,49 ,49 ,49 ,0 ,0 ,0 ,0 ,0 ,50 ,50 ,50 ,50\n",
    " ,50 ,50 ,50 ,50 ,50 ,50 ,51 ,51 ,51 ,51 ,51 ,51 ,51 ,51 ,51 ,51 ,52 ,52 ,52 ,52 ,52 ,52 ,52 ,52\n",
    " ,52 ,52 ,53 ,53 ,53 ,53 ,53 ,53 ,53 ,53 ,53 ,53 ,54 ,54 ,54 ,54 ,54 ,54 ,54 ,54 ,54 ,54 ,55 ,55\n",
    " ,55 ,55 ,55 ,55 ,55 ,55 ,55 ,55 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,57 ,57 ,57 ,57 ,57 ,57\n",
    " ,57 ,57 ,57 ,57 ,58 ,58 ,58 ,58 ,58 ,58 ,58 ,58 ,58 ,58 ,59 ,59 ,59 ,59 ,59 ,59 ,59 ,59 ,59 ,59\n",
    " ,60 ,60 ,60 ,60 ,60 ,60 ,60 ,60 ,60 ,60 ,61 ,61 ,61 ,61 ,61 ,61 ,61 ,61 ,0 ,0 ,62 ,62 ,62 ,62\n",
    " ,62 ,62 ,62 ,62 ,62 ,62 ,63 ,63 ,63 ,63 ,63 ,63 ,63 ,63 ,63 ,63 ,64 ,64 ,64 ,64 ,64 ,64 ,64 ,64\n",
    " ,64 ,64 ,65 ,65 ,65 ,65 ,65 ,0 ,0 ,0 ,0 ,0 ,66 ,66 ,66 ,66 ,66 ,66 ,66 ,66 ,66 ,0 ,67 ,67\n",
    " ,67 ,67 ,67 ,67 ,67 ,67 ,67 ,67 ,68 ,68 ,68 ,68 ,68 ,68 ,68 ,68 ,68 ,68 ,69 ,69 ,69 ,69 ,69 ,69\n",
    " ,69 ,69 ,69 ,69 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,71 ,71 ,71 ,71 ,71 ,71 ,71 ,71 ,71 ,71\n",
    " ,72 ,72 ,72 ,72 ,72 ,72 ,72 ,72 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,74 ,74 ,74 ,74\n",
    " ,74 ,74 ,74 ,74 ,74 ,74 ,75 ,75 ,75 ,75 ,75 ,75 ,75 ,75 ,0 ,0 ,76 ,76 ,76 ,76 ,76 ,76 ,76 ,76\n",
    " ,76 ,76 ,77 ,77 ,77 ,77 ,77 ,77 ,77 ,77 ,77 ,77 ,78 ,78 ,78 ,78 ,78 ,78 ,78 ,78 ,78 ,78 ,79 ,79\n",
    " ,79 ,79 ,79 ,79 ,79 ,79 ,79 ,79 ,80 ,80 ,80 ,80 ,80 ,80 ,80 ,80 ,80 ,80 ,81 ,81 ,81 ,81 ,81 ,81\n",
    " ,81 ,81 ,81 ,81 ,82 ,82 ,82 ,82 ,82 ,82 ,82 ,82 ,82 ,82 ,83 ,83 ,83 ,83 ,83 ,83 ,83 ,83 ,83 ,83\n",
    " ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,85 ,85 ,85 ,85 ,85 ,85 ,85 ,85 ,85 ,85 ,86 ,86 ,86 ,86\n",
    " ,86 ,86 ,86 ,86 ,86 ,86 ,87 ,87 ,87 ,87 ,87 ,87 ,87 ,87 ,87 ,87 ,88 ,88 ,88 ,88 ,88 ,88 ,88 ,88\n",
    " ,88 ,88 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,90 ,90 ,90 ,90 ,90 ,90 ,90 ,90 ,90 ,90 ,91 ,91\n",
    " ,91 ,91 ,91 ,91 ,91 ,91 ,91 ,91 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,93 ,93 ,93 ,93 ,93 ,0\n",
    " ,0 ,0 ,0 ,0 ,94 ,94 ,94 ,94 ,94 ,94 ,94 ,94 ,94 ,94 ,95 ,95 ,95 ,95 ,95 ,95 ,95 ,95 ,0 ,0\n",
    " ,96 ,96 ,96 ,96 ,96 ,96 ,96 ,96 ,96 ,96 ,97 ,97 ,97 ,97 ,97 ,97 ,97 ,97 ,97 ,97 ,98 ,98 ,98 ,98\n",
    " ,98 ,98 ,98 ,98 ,98 ,98 ,99 ,99 ,99 ,99 ,99 ,99 ,99 ,99 ,99 ,99]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2391439e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [ 4,  4,  4,  4,  4,  4,  4,  4,  4,  4],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [ 6,  6,  6,  6,  6,  6,  6,  6,  6,  6],\n",
       "       [ 7,  7,  7,  7,  7,  7,  7,  7,  7,  7],\n",
       "       [ 8,  8,  8,  8,  8,  8,  8,  8,  8,  8],\n",
       "       [ 9,  9,  9,  9,  9,  9,  9,  9,  9,  9],\n",
       "       [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],\n",
       "       [11, 11, 11, 11, 11, 11, 11, 11,  0,  0],\n",
       "       [12, 12, 12, 12, 12, 12, 12, 12, 12, 12],\n",
       "       [13, 13, 13, 13, 13, 13, 13, 13, 13, 13],\n",
       "       [14, 14, 14, 14, 14, 14, 14, 14, 14, 14],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [16, 16, 16, 16, 16, 16, 16, 16, 16, 16],\n",
       "       [17, 17, 17, 17, 17, 17, 17, 17, 17, 17],\n",
       "       [18, 18, 18, 18, 18, 18, 18, 18, 18, 18],\n",
       "       [19, 19, 19, 19, 19, 19, 19, 19, 19,  0],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [21, 21, 21, 21, 21, 21, 21, 21, 21, 21],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [23, 23, 23, 23, 23, 23, 23, 23,  0,  0],\n",
       "       [24, 24, 24, 24, 24, 24, 24, 24, 24, 24],\n",
       "       [25, 25, 25, 25, 25, 25, 25, 25, 25, 25],\n",
       "       [26, 26, 26, 26, 26, 26, 26, 26, 26, 26],\n",
       "       [27, 27, 27, 27, 27, 27, 27, 27, 27, 27],\n",
       "       [28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n",
       "       [29, 29, 29, 29, 29, 29, 29, 29, 29, 29],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [31, 31, 31, 31, 31, 31, 31, 31, 31, 31],\n",
       "       [32, 32, 32, 32, 32, 32, 32, 32, 32, 32],\n",
       "       [33, 33, 33, 33, 33, 33, 33, 33, 33, 33],\n",
       "       [34, 34, 34, 34, 34, 34, 34, 34, 34, 34],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [38, 38, 38, 38, 38, 38, 38, 38, 38, 38],\n",
       "       [39, 39, 39, 39, 39, 39, 39, 39, 39, 39],\n",
       "       [40, 40, 40, 40, 40, 40, 40, 40,  0,  0],\n",
       "       [41, 41, 41, 41, 41, 41, 41, 41,  0,  0],\n",
       "       [42, 42, 42, 42, 42, 42, 42, 42, 42, 42],\n",
       "       [43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n",
       "       [44, 44, 44, 44, 44, 44, 44, 44,  0,  0],\n",
       "       [45, 45, 45, 45, 45, 45, 45, 45,  0,  0],\n",
       "       [46, 46, 46, 46, 46, 46, 46, 46, 46, 46],\n",
       "       [47, 47, 47, 47, 47, 47, 47, 47,  0,  0],\n",
       "       [48, 48, 48, 48, 48, 48, 48, 48, 48, 48],\n",
       "       [49, 49, 49, 49, 49,  0,  0,  0,  0,  0],\n",
       "       [50, 50, 50, 50, 50, 50, 50, 50, 50, 50],\n",
       "       [51, 51, 51, 51, 51, 51, 51, 51, 51, 51],\n",
       "       [52, 52, 52, 52, 52, 52, 52, 52, 52, 52],\n",
       "       [53, 53, 53, 53, 53, 53, 53, 53, 53, 53],\n",
       "       [54, 54, 54, 54, 54, 54, 54, 54, 54, 54],\n",
       "       [55, 55, 55, 55, 55, 55, 55, 55, 55, 55],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [57, 57, 57, 57, 57, 57, 57, 57, 57, 57],\n",
       "       [58, 58, 58, 58, 58, 58, 58, 58, 58, 58],\n",
       "       [59, 59, 59, 59, 59, 59, 59, 59, 59, 59],\n",
       "       [60, 60, 60, 60, 60, 60, 60, 60, 60, 60],\n",
       "       [61, 61, 61, 61, 61, 61, 61, 61,  0,  0],\n",
       "       [62, 62, 62, 62, 62, 62, 62, 62, 62, 62],\n",
       "       [63, 63, 63, 63, 63, 63, 63, 63, 63, 63],\n",
       "       [64, 64, 64, 64, 64, 64, 64, 64, 64, 64],\n",
       "       [65, 65, 65, 65, 65,  0,  0,  0,  0,  0],\n",
       "       [66, 66, 66, 66, 66, 66, 66, 66, 66,  0],\n",
       "       [67, 67, 67, 67, 67, 67, 67, 67, 67, 67],\n",
       "       [68, 68, 68, 68, 68, 68, 68, 68, 68, 68],\n",
       "       [69, 69, 69, 69, 69, 69, 69, 69, 69, 69],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [71, 71, 71, 71, 71, 71, 71, 71, 71, 71],\n",
       "       [72, 72, 72, 72, 72, 72, 72, 72,  0,  0],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [74, 74, 74, 74, 74, 74, 74, 74, 74, 74],\n",
       "       [75, 75, 75, 75, 75, 75, 75, 75,  0,  0],\n",
       "       [76, 76, 76, 76, 76, 76, 76, 76, 76, 76],\n",
       "       [77, 77, 77, 77, 77, 77, 77, 77, 77, 77],\n",
       "       [78, 78, 78, 78, 78, 78, 78, 78, 78, 78],\n",
       "       [79, 79, 79, 79, 79, 79, 79, 79, 79, 79],\n",
       "       [80, 80, 80, 80, 80, 80, 80, 80, 80, 80],\n",
       "       [81, 81, 81, 81, 81, 81, 81, 81, 81, 81],\n",
       "       [82, 82, 82, 82, 82, 82, 82, 82, 82, 82],\n",
       "       [83, 83, 83, 83, 83, 83, 83, 83, 83, 83],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [85, 85, 85, 85, 85, 85, 85, 85, 85, 85],\n",
       "       [86, 86, 86, 86, 86, 86, 86, 86, 86, 86],\n",
       "       [87, 87, 87, 87, 87, 87, 87, 87, 87, 87],\n",
       "       [88, 88, 88, 88, 88, 88, 88, 88, 88, 88],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [90, 90, 90, 90, 90, 90, 90, 90, 90, 90],\n",
       "       [91, 91, 91, 91, 91, 91, 91, 91, 91, 91],\n",
       "       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
       "       [93, 93, 93, 93, 93,  0,  0,  0,  0,  0],\n",
       "       [94, 94, 94, 94, 94, 94, 94, 94, 94, 94],\n",
       "       [95, 95, 95, 95, 95, 95, 95, 95,  0,  0],\n",
       "       [96, 96, 96, 96, 96, 96, 96, 96, 96, 96],\n",
       "       [97, 97, 97, 97, 97, 97, 97, 97, 97, 97],\n",
       "       [98, 98, 98, 98, 98, 98, 98, 98, 98, 98],\n",
       "       [99, 99, 99, 99, 99, 99, 99, 99, 99, 99]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr = np.array(a)\n",
    "arr = arr.reshape((100,10))\n",
    "arr "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27352fe5",
   "metadata": {},
   "outputs": [],
   "source": [
    "   def plot_alive(self):\n",
    "        alive_part = []\n",
    "        for turn in range(self.nturns):\n",
    "            alive_part.append(self.data.where(self.data.loc[ 'state', :, turn] > 0, drop = True).shape[1])\n",
    "\n",
    "        fig = plt.figure(figsize=(8, 5))\n",
    "        ax = fig.add_subplot(1,1,1)\n",
    "        ax.plot(self.data.coords['turn'], alive_part)\n",
    "        ax.set_xlabel('turn')\n",
    "        ax.set_ylabel('Number of particles')\n",
    "\n",
    "\n",
    "    def plot_distributions(self, x, y, px, py, **kwargs):\n",
    "\n",
    "        fig1 = plt.figure( figsize=(22, 10))\n",
    "        ax1 = fig1.add_subplot(2,3,1)\n",
    "        ax1.hist(x, bins=100)\n",
    "        ax1.set_xlabel('x [mm]')\n",
    "        ax1.set_ylabel(\"\")\n",
    "        ax1.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "        ax2 = fig1.add_subplot(2,3,2)\n",
    "        ax2.hist(y, bins=100) \n",
    "        ax2.set_xlabel('y [mm]')\n",
    "        ax2.set_ylabel('')\n",
    "        \n",
    "        ax2.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax2.set_title(f'Total particles: {len(x)}')\n",
    "\n",
    "        ax3 = fig1.add_subplot(2,3,3)\n",
    "        h = ax3.hist2d(x, y, bins=100, norm=matplotlib.colors.LogNorm())#,  vmin = 1, vmax = 1e6, range = ([-40e-6, 40e-6], [-40e-6,40e-6])) \n",
    "        ax3.set_xlabel(r'x [mm]')\n",
    "        #ax3.set_ylim(0,0.008)\n",
    "        ax3.set_ylabel(r'y [mm]')\n",
    "        ax3.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax3.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.yticks()[0]])\n",
    "        ax3_tw = ax3.twinx()\n",
    "        sigma_abs = self.jaw_L/self.n_sigma\n",
    "        ax3_tw.set_ylim(ax3.get_ylim()[0]/sigma_abs, ax3.get_ylim()[1]/sigma_abs)\n",
    "        yticks = np.arange(np.ceil(ax3_tw.get_ylim()[0]), np.floor(ax3_tw.get_ylim()[1]) + 1, 2)\n",
    "        ax3_tw.set_yticks(yticks)\n",
    "        ax3_tw.set_ylabel(r' n $\\sigma$')\n",
    "\n",
    "        if \"sigma\" in kwargs and kwargs['sigma'] == True:\n",
    "            ax3_tw.axhline(self.n_sigma, color = 'r', linestyle = '--')\n",
    "            #ax3_tw.text( 0,0, r'TCP $\\sigma$') #max(ax3.get_xticks())-1.5e-3, 4,\n",
    "\n",
    "        axins = inset_axes(ax3, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "        fig1.colorbar(h[3], cax=axins, orientation='vertical', label='Count (log scale)')\n",
    "        ax3.grid(linestyle=':')\n",
    "\n",
    "        ax12 = fig1.add_subplot(2,3,4)\n",
    "        ax12.hist(px, bins=100)\n",
    "        ax12.set_xlabel(r'px [$\\mu$rad]')\n",
    "        ax12.set_ylabel(\"\")\n",
    "        \n",
    "        ax12.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "\n",
    "        ax22 = fig1.add_subplot(2,3,5)\n",
    "        ax22.hist(py, bins=100) \n",
    "        ax22.set_xlabel(r'py [$\\mu$rad]')\n",
    "        ax22.set_ylabel('')\n",
    "        ax22.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "        if self.element_type == 'crystal' and \"xpcrit\" in kwargs and kwargs['xpcrit'] == True:   \n",
    "            mean_angle = None\n",
    "            if self.align_angle is None and \"py_mean\" in kwargs:\n",
    "                mean_angle = kwargs['py_mean']\n",
    "            elif self.align_angle is not None:\n",
    "                mean_angle = self.align_angle\n",
    "            elif \"calculate_mean\" in kwargs and kwargs['calculate_mean'] == True:\n",
    "                mean_angle = self.calculate_mean_py(**kwargs)\n",
    "             \n",
    "            if mean_angle is not None: \n",
    "                ax22.axvline(mean_angle, color = 'red', linestyle = '-', alpha = 0.8)\n",
    "                if(self.xp_crit < 0):\n",
    "                    print(f\"!!!!!!!!!!!!! \\nERROR: particles at {self.p0c} cannot be channeled if bending is {self.bend} \\n!!!!!!!!!!!!!\")\n",
    "                else:\n",
    "                    ax22.axvline(mean_angle  + np.abs(self.xp_crit), color = 'red', linestyle = '--', alpha = 0.9)\n",
    "                    ax22.axvline(mean_angle - np.abs(self.xp_crit), color = 'red', linestyle = '--', alpha = 0.9)\n",
    "                    chann_mask = (py > mean_angle  - np.abs(self.xp_crit)) & (py < mean_angle  + np.abs(self.xp_crit))\n",
    "                    chann = len(py[chann_mask])\n",
    "                    ax22.set_title(f'N particle inside critical angle range: {chann}')\n",
    "\n",
    "        ax32 = fig1.add_subplot(2,3,6)\n",
    "        h2 = ax32.hist2d(px, py, bins=100, norm=matplotlib.colors.LogNorm())  #,, norm=matplotlib.colors.LogNorm() range = ([-40e-6, 40e-6], [-40e-6,40e-6])\n",
    "        ax32.set_xlabel(r'px [$\\mu$rad]')\n",
    "        ax32.set_ylabel(r'py [$\\mu$rad]')\n",
    "        ax32.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax32.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.yticks()[0]])\n",
    "        axins_2 = inset_axes(ax32, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "        fig1.colorbar(h2[3], cax=axins_2, orientation='vertical', label='Count (log scale)')\n",
    "        ax32.grid(linestyle=':')\n",
    "\n",
    "        if \"log\" in kwargs and kwargs['log'] == True:  \n",
    "            ax22.set_yscale(\"log\")\n",
    "            ax2.set_yscale(\"log\")\n",
    "            ax12.set_yscale(\"log\")\n",
    "            ax1.set_yscale(\"log\")\n",
    "\n",
    "\n",
    "        #fig1.suptitle('plot')\n",
    "        plt.show()\n",
    "        #return fig1, [ax1,ax2,ax3]\n",
    "\n",
    "\n",
    "    def plot_distributions_at_turn(self, turn, element_dimensions=False):\n",
    "        alive_arr = self.data.where(self.data.loc[ 'state', :, turn] > 0, drop = True)[:,:,turn]\n",
    "        if element_dimensions:\n",
    "            alive_arr = alive_arr.where(((alive_arr.loc[ 'x', :] > self.abs_x_low) & (alive_arr.loc[ 'x', :] < self.abs_x_up) & (alive_arr.loc[ 'y', :] > self.abs_y_low) & (alive_arr.loc[ 'y', :] < self.abs_y_up)), drop = True)\n",
    "        \n",
    "        if alive_arr.shape[1] == 0:\n",
    "            print(\"No particles!\")\n",
    "            return\n",
    "        \n",
    "        self.plot_distributions(alive_arr.loc['x', :], alive_arr.loc['y',:], alive_arr.loc['px', :], alive_arr.loc['py', :])\n",
    "\n",
    "\n",
    "    def plot_particle_history(self, property_name, part_id):\n",
    "\n",
    "        fig = plt.figure(figsize=(8, 5))\n",
    "        ax = fig.add_subplot(1,1,1)\n",
    "        ax.plot(self.data.coords['turn'], self.data.loc[property_name, part_id])\n",
    "        ax.set_xlabel('turn')\n",
    "        ax.set_ylabel(property_name)\n",
    "\n",
    "\n",
    "    def count_upper_lower(self, turn):\n",
    "        alive_y = self.data.where(self.data.loc[ 'state', :, turn] > 0, drop = True).loc['y',:,turn]\n",
    "        print(f'Alive particle after at {self.element_type} at {turn} turn: ', len(alive_y))\n",
    "        print(f'Upper particles at {self.element_type}: ', len(alive_y.where(alive_y > 0, drop = True)))\n",
    "        print(f'Lower particles at {self.element_type}: ', len(alive_y.where(alive_y < 0, drop = True)))\n",
    "\n",
    "\n",
    "    def impacting_particles(self):\n",
    "        x, y, px, py, ids, turn_id, part_id_turn = np.empty((0,)), np.empty((0,)), np.empty((0,)), np.empty((0,)), np.empty((0,)), np.empty((0,)), np.empty((0,))\n",
    "        count_not_chann = 0\n",
    "        for turn in range(self.nturns):\n",
    "            impact_part = self.data.where(((self.data.loc[ 'x', :, turn] > self.abs_x_low) & (self.data.loc[ 'x', :, turn] < self.abs_x_up) & (self.data.loc[ 'y', :, turn] > self.abs_y_low) & (self.data.loc[ 'y', :, turn] < self.abs_y_up)), drop = True)[:,:,turn]\n",
    "            for id in part_id_turn:\n",
    "                if self.data.loc['state', id, turn] != 0:\n",
    "                    if self.element_type == 'target':         \n",
    "                        print(f\"Particle {id} not absorbed at turn {turn-1}\")\n",
    "                    elif  self.element_type == 'crystal':\n",
    "                        count_not_chann = count_not_chann + 1                    \n",
    "            \n",
    "            impact_part = impact_part.where(impact_part.loc[ 'state', :] > 0, drop = True)\n",
    "            if(impact_part.shape[1]>0):\n",
    "                part_id_turn = np.array(impact_part.coords['id'])\n",
    "                ids = np.concatenate((ids, part_id_turn))\n",
    "                x = np.concatenate((x,  np.array(impact_part.loc['x', :])))\n",
    "                y = np.concatenate((y,  np.array(impact_part.loc['y', :])))\n",
    "                px = np.concatenate((px,  np.array(impact_part.loc['px', :])))\n",
    "                py = np.concatenate((py,  np.array(impact_part.loc['py', :])))\n",
    "                turn_id = np.concatenate((turn_id, np.array([turn for i in range(len(part_id_turn))])))\n",
    "            else:\n",
    "                part_id_turn =  np.empty((0,))\n",
    "\n",
    "        # Use numpy.unique to check for repeated numbers\n",
    "        unique_parts, counts = np.unique(ids, return_counts=True)\n",
    "        repeated_indices = np.where(counts > 1)[0]\n",
    "        if len(repeated_indices) > 0 and self.element_type =='target':\n",
    "            print(f\"There are repeated numbers in the array! Particle id : {unique_parts[repeated_indices]}\\n\")\n",
    "           \n",
    "        if self.element_type == 'crystal':\n",
    "            print(\"Total particles: \", len(x))\n",
    "            print('Number of particles passed to the crystal multiple times: ', len(repeated_indices))\n",
    "            print('Number particles gone through the crystal not dead the turn after: ', count_not_chann)\n",
    "            if self.align_angle is not None:\n",
    "                if(self.xp_crit < 0):\n",
    "                    print(f\"!!!!!!!!!!!!! \\nERROR: particles at {self.p0c} cannot be channeled if bending is {self.bend} \\n!!!!!!!!!!!!!\")\n",
    "                else:\n",
    "                    chann_mask = (py > self.align_angle  - np.abs(self.xp_crit)) & (py < self.align_angle  + np.abs(self.xp_crit))\n",
    "                    chann = len(py[chann_mask])\n",
    "                    print('Number particles inside critical angle range: ', chann)\n",
    "\n",
    "        part_dict = {\"id\": ids.astype(int), \"turn_id\": turn_id.astype(int), \"x\": x, \"y\": y, \"px\":px, \"py\":py}\n",
    "\n",
    "        impact_part_df = pd.DataFrame(part_dict) \n",
    "        self.impact_part = impact_part_df  \n",
    "\n",
    "        return impact_part_df\n",
    "\n",
    "    def plot_impacting_particles(self, **kwargs):\n",
    "        if self.impact_part is None:\n",
    "            df = self.impacting_particles()\n",
    "        else:\n",
    "            df = self.impact_part \n",
    "        self.plot_distributions(df['x'], df['y'], df['px'], df['py'], **kwargs)\n",
    "    \n",
    "    def calculate_mean_py(self, **kwargs):\n",
    "        if self.impact_part is None:\n",
    "            df = self.impacting_particles()\n",
    "        else:\n",
    "            df = self.impact_part \n",
    "\n",
    "        pys = df['py']\n",
    "        if 'lower_cut' in kwargs and kwargs['lower_cut'] is not None:\n",
    "            pys = pys[pys >= kwargs['lower_cut']]\n",
    "        if 'upper_cut' in kwargs and kwargs['upper_cut'] is not None:\n",
    "            pys = pys[pys <= kwargs['upper_cut']]\n",
    "\n",
    "        # Calculate the mean of the filtered data\n",
    "        mean_value = pys.mean()\n",
    "        print('Mean py: ', mean_value)\n",
    "        return(mean_value)        "
   ]
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
