{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "33b12567",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Packages pyspark or cern.nxcals are not installed. Data retrieval from NXCALS is not possible.\n",
      " If you are on SWAN and did not expect this warning, then restart and load the 'NXCals Pro' software stack.\n",
      "No pytransport functionality\n",
      "No pytransport functionality\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import os\n",
    "import subprocess\n",
    "\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import yaml\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "import lossmaps as lm\n",
    "import xobjects as xo\n",
    "\n",
    "import xtrack as xt\n",
    "import xcoll as xc\n",
    "\n",
    "import lossmaps as lm\n",
    "from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n",
    "\n",
    "import xarray as xr\n",
    "\n",
    "import json\n",
    "\n",
    "import xtrack as xt\n",
    "import xpart as xp\n",
    "import xobjects as xo\n",
    "\n",
    "\n",
    "import pickle \n",
    "import h5py\n",
    "import io\n",
    "import scipy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c8aa112",
   "metadata": {},
   "source": [
    "# Particles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c1a95bbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def retreive_file_path(prefix_name, path = \"/eos/home-i04/c/cmaccani/xsuite_sim/two_cryst_sim/Condor/\"):\n",
    "\n",
    "    test_list = [path + i for i in os.listdir(path) if prefix_name in i]\n",
    "    for test_name in test_list:\n",
    "\n",
    "        n_jobs = int(subprocess.check_output(\"find \"+ test_name +\" -maxdepth 1 -mindepth 1 -type d | grep Job. | wc -l\", shell=True))\n",
    "\n",
    "        part_dfs =[]\n",
    "\n",
    "        for i in range(n_jobs):\n",
    "            file_path_part = (subprocess.check_output(\"echo \" + test_name + '/Job.' + str(i) + '/Outputdata/particle*.h5', shell=True)).decode('ascii').strip()\n",
    "            if os.path.exists(file_path_part):\n",
    "                part_dfs.append(file_path_part)\n",
    "\n",
    "        n_jobs_verify  = len(part_dfs)\n",
    "        if n_jobs != n_jobs_verify:\n",
    "            print(\"!!! Succesful Jobs: \", n_jobs_verify_TARGET, '/', n_jobs, ' in file: ', test_name)\n",
    "    return part_dfs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ef2f1da0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20240109-1222\r\n",
      "TEST_IR3_IR7rem_TCCS_7.7__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_8.2__target_absorber_20231222-1829\r\n",
      "TEST_IR3_IR7rem_TCCS_8.7__target_absorber_20231222-1830\r\n",
      "TEST_IR7rem_TCCS_7.2__target_absorber_20231222-1824\r\n",
      "TEST_IR7rem_TCCS_7.7__target_absorber_20231222-1825\r\n",
      "TEST_IR7rem_TCCS_8.2__target_absorber_20231222-1826\r\n",
      "TEST_IR7rem_TCCS_8.7__target_absorber_20231222-1826\r\n",
      "TEST_NEW_SETUP__xsuite_20231215-2005\r\n"
     ]
    }
   ],
   "source": [
    "! ls ${HOME_TWOCRYST}/Condor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "592b9201",
   "metadata": {},
   "outputs": [],
   "source": [
    "job_name_new = \"TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20240109-1222\"\n",
    "path_new = retreive_file_path(job_name_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e5880441",
   "metadata": {},
   "outputs": [],
   "source": [
    "job_name_IR3_IR7_7_2 = \"TEST_IR3_IR7rem_TCCS_7.2__target_absorber_20231222-1829\"\n",
    "job_name_IR7_7_2 = \"TEST_IR7rem_TCCS_7.2__target_absorber_20231222-1824\"\n",
    "job_name_IR3_IR7_7_7 = \"TEST_IR3_IR7rem_TCCS_7.7__target_absorber_20231222-1829\"\n",
    "job_name_IR7_7_7 = \"TEST_IR7rem_TCCS_7.7__target_absorber_20231222-1825\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "edc4dac0",
   "metadata": {},
   "outputs": [],
   "source": [
    "path_IR3_IR7_7_2 = retreive_file_path(job_name_IR3_IR7_7_2)\n",
    "path_IR7_7_2 = retreive_file_path(job_name_IR7_7_2)\n",
    "path_IR3_IR7_7_7 = retreive_file_path(job_name_IR3_IR7_7_7)\n",
    "path_IR7_7_7 = retreive_file_path(job_name_IR7_7_7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "351c1601",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ParticleAnalysis():\n",
    "\n",
    "    def __init__(self, element_type, n_sigma, length, xdim, ydim, jaw_L, bend=None, align_angle = None, line_idx= None, \n",
    "                 beam = 2, plane = 'V',\n",
    "                 pot_crit = 21.34, #16 #eV Silicon\n",
    "                 en_crit = 5.7e9 / 1e-2 #eV/m Silicon    #dp_Si = 1.92e-10 #m\n",
    "                 ):\n",
    "\n",
    "        self.beam = beam\n",
    "        self.plane = plane\n",
    "        self.element_type = element_type\n",
    "        self.n_sigma = n_sigma\n",
    "        self.length = length\n",
    "        self.xdim = xdim\n",
    "        self.ydim = ydim\n",
    "        self.align_angle = align_angle\n",
    "        self.jaw_L = jaw_L\n",
    "        self.en_crit = en_crit\n",
    "        self.pot_crit = pot_crit\n",
    "        self.line_idx = line_idx\n",
    "        self.p0c = None\n",
    "        self.npart = None\n",
    "        self.data = None\n",
    "        self.impact_part = None\n",
    "        self.line_idx = line_idx\n",
    "        self.abs_y_low = self.jaw_L\n",
    "        self.abs_y_up = self.jaw_L + self.ydim\n",
    "        self.abs_x_low = -self.xdim/2\n",
    "        self.abs_x_up = self.ydim/2\n",
    "        \n",
    "        if element_type == 'crystal':\n",
    "            self.bend = bend \n",
    "\n",
    "    def load(self, h5_file_path, df_key = 'particles'):\n",
    "\n",
    "        if not hasattr(h5_file_path, '__iter__') or isinstance(h5_file_path, str):\n",
    "            h5_file_path = [h5_file_path]\n",
    "\n",
    "        df_particles = pd.DataFrame()\n",
    "        npart = 0\n",
    "\n",
    "        for file in h5_file_path:\n",
    "            try:\n",
    "                df_tmp = pd.read_hdf(file, key=df_key) #test_particles_B2V\n",
    "                df_tmp['particle_id'] = df_tmp['particle_id'] + npart    \n",
    "                df_tmp['parent_particle_id'] = df_tmp['parent_particle_id'] + npart \n",
    "                df_particles = pd.concat([df_particles, df_tmp])\n",
    "            except FileNotFoundError:\n",
    "                print(f\"Error: File not found at {file}\")\n",
    "                continue\n",
    "            except pd.errors.EmptyDataError:\n",
    "                print(f\"Error: The HDF5 file at {file} is empty.\")\n",
    "                continue\n",
    "            except Exception as e:\n",
    "                print(f\"Error: An unexpected error occurred - {e}\")\n",
    "                continue\n",
    "            npart = npart + len(df_tmp)\n",
    "        #check if there are duplicated     \n",
    "        data = df_particles['particle_id']\n",
    "        duplicated_mask = data.duplicated()\n",
    "        if len(data[duplicated_mask]) != 0:\n",
    "            print(f'There are repeated particle ids: {data[duplicated_mask]}')\n",
    "            \n",
    "        self.npart = npart       \n",
    "        self.data = df_particles\n",
    "            \n",
    "        p0c = None\n",
    "        if len(self.data['p0c'].unique()) == 1:\n",
    "            p0c = self.data['p0c'].unique()[0]\n",
    "        else:\n",
    "            print('There are particles at different energies')            \n",
    "        self.p0c = p0c\n",
    "        \n",
    "        if self.element_type == 'crystal':\n",
    "            xp_crit0 = np.sqrt(2.0*self.pot_crit/self.p0c)\n",
    "            Rcrit = self.p0c/self.en_crit\n",
    "            self.xp_crit = xp_crit0*(1-Rcrit/self.bend)\n",
    "            if(self.xp_crit < 0):\n",
    "                print(\"!!!!!!!!!!!!! \\nERROR: particles at\",self.p0c, f\"eV cannot be channeled if bending is {self.bend} m \\n!!!!!!!!!!!!!\")\n",
    "                \n",
    "        \n",
    "    def plot_distributions(self, x, y, px, py, **kwargs):\n",
    "\n",
    "        fig1 = plt.figure( figsize=(22, 10))\n",
    "        ax1 = fig1.add_subplot(2,3,1)\n",
    "        ax1.hist(x, bins=100)\n",
    "        ax1.set_xlabel('x [mm]')\n",
    "        ax1.set_ylabel(\"\")\n",
    "        ax1.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "        ax2 = fig1.add_subplot(2,3,2)\n",
    "        ax2.hist(y, bins=100) \n",
    "        ax2.set_xlabel('y [mm]')\n",
    "        ax2.set_ylabel('')\n",
    "        \n",
    "        ax2.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax2.set_title(f'Total particles: {len(x)}')\n",
    "\n",
    "        ax3 = fig1.add_subplot(2,3,3)\n",
    "        h = ax3.hist2d(x, y, bins=100, norm=matplotlib.colors.LogNorm())#,  vmin = 1, vmax = 1e6, range = ([-40e-6, 40e-6], [-40e-6,40e-6])) \n",
    "        ax3.set_xlabel(r'x [mm]')\n",
    "        #ax3.set_ylim(0,0.008)\n",
    "        ax3.set_ylabel(r'y [mm]')\n",
    "        ax3.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax3.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.yticks()[0]])\n",
    "        ax3_tw = ax3.twinx()\n",
    "        sigma_abs = self.jaw_L/self.n_sigma\n",
    "        ax3_tw.set_ylim(ax3.get_ylim()[0]/sigma_abs, ax3.get_ylim()[1]/sigma_abs)\n",
    "        yticks = np.arange(np.ceil(ax3_tw.get_ylim()[0]), np.floor(ax3_tw.get_ylim()[1]) + 1, 2)\n",
    "        ax3_tw.set_yticks(yticks)\n",
    "        ax3_tw.set_ylabel(r' n $\\sigma$')\n",
    "\n",
    "        if \"sigma\" in kwargs and kwargs['sigma'] == True:\n",
    "            ax3_tw.axhline(self.n_sigma, color = 'r', linestyle = '--')\n",
    "            #ax3_tw.text( 0,0, r'TCP $\\sigma$') #max(ax3.get_xticks())-1.5e-3, 4,\n",
    "\n",
    "        axins = inset_axes(ax3, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "        fig1.colorbar(h[3], cax=axins, orientation='vertical', label='Count (log scale)')\n",
    "        ax3.grid(linestyle=':')\n",
    "\n",
    "        ax12 = fig1.add_subplot(2,3,4)\n",
    "        ax12.hist(px, bins=100)\n",
    "        ax12.set_xlabel(r'px [$\\mu$rad]')\n",
    "        ax12.set_ylabel(\"\")\n",
    "        \n",
    "        ax12.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "\n",
    "        ax22 = fig1.add_subplot(2,3,5)\n",
    "        ax22.hist(py, bins=100) \n",
    "        ax22.set_xlabel(r'py [$\\mu$rad]')\n",
    "        ax22.set_ylabel('')\n",
    "        ax22.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "        if self.element_type == 'crystal' and \"xpcrit\" in kwargs and kwargs['xpcrit'] == True:   \n",
    "            mean_angle = None\n",
    "            if self.align_angle is None and \"py_mean\" in kwargs:\n",
    "                mean_angle = kwargs['py_mean']\n",
    "            elif self.align_angle is not None:\n",
    "                mean_angle = self.align_angle\n",
    "            elif \"calculate_mean\" in kwargs and kwargs['calculate_mean'] == True:\n",
    "                mean_angle = self.calculate_mean_py(**kwargs)\n",
    "             \n",
    "            if mean_angle is not None: \n",
    "                ax22.axvline(mean_angle, color = 'red', linestyle = '-', alpha = 0.8)\n",
    "                if(self.xp_crit < 0):\n",
    "                    print(f\"!!!!!!!!!!!!! \\nERROR: particles at {self.p0c} cannot be channeled if bending is {self.bend} \\n!!!!!!!!!!!!!\")\n",
    "                else:\n",
    "                    ax22.axvline(mean_angle  + np.abs(self.xp_crit), color = 'red', linestyle = '--', alpha = 0.9)\n",
    "                    ax22.axvline(mean_angle - np.abs(self.xp_crit), color = 'red', linestyle = '--', alpha = 0.9)\n",
    "                    chann_mask = (py > mean_angle  - np.abs(self.xp_crit)) & (py < mean_angle  + np.abs(self.xp_crit))\n",
    "                    chann = len(py[chann_mask])\n",
    "                    ax22.set_title(f'N particle inside critical angle range: {chann}')\n",
    "\n",
    "        ax32 = fig1.add_subplot(2,3,6)\n",
    "        h2 = ax32.hist2d(px, py, bins=100, norm=matplotlib.colors.LogNorm())  #,, norm=matplotlib.colors.LogNorm() range = ([-40e-6, 40e-6], [-40e-6,40e-6])\n",
    "        ax32.set_xlabel(r'px [$\\mu$rad]')\n",
    "        ax32.set_ylabel(r'py [$\\mu$rad]')\n",
    "        ax32.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax32.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.yticks()[0]])\n",
    "        axins_2 = inset_axes(ax32, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "        fig1.colorbar(h2[3], cax=axins_2, orientation='vertical', label='Count (log scale)')\n",
    "        ax32.grid(linestyle=':')\n",
    "\n",
    "        if \"log\" in kwargs and kwargs['log'] == True:  \n",
    "            ax22.set_yscale(\"log\")\n",
    "            ax2.set_yscale(\"log\")\n",
    "            ax12.set_yscale(\"log\")\n",
    "            ax1.set_yscale(\"log\")\n",
    "\n",
    "            \n",
    "        # Save the figure object using pickle\n",
    "        with open('saved_figure.pkl', 'wb') as file:\n",
    "            pickle.dump(fig1, file)\n",
    "\n",
    "        #fig1.suptitle('plot')\n",
    "        plt.show()\n",
    "        #return fig1, [ax1,ax2,ax3]\n",
    "        \n",
    "        \n",
    "    def compute_impact_particles(self, **kwargs):\n",
    "        if self.data is None:\n",
    "            self.load(kwargs['h5_file_path'])\n",
    "        self.impact_part = self.data[(self.data.at_element == self.line_idx) & (self.data.state<0)]\n",
    "        print(\"Impacting particles: \", len(self.impact_part), \"/\", self.npart)\n",
    "        self.plot_distributions(self.impact_part['x'], self.impact_part['y'], self.impact_part['px'], self.impact_part['py'] )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcf3c653",
   "metadata": {},
   "source": [
    "ParticleAnalysis(element_type='crystal', n_sigma=7.2, length=0.004, ydim=0.002, xdim=0.035, bend=80.0, align_angle=-2.337255626586841e-05, jaw_L=0.00271382348186472, line_idx=110029)\n",
    "\n",
    "\n",
    "ParticleAnalysis(element_type='target', n_sigma=42.6, length=0.005, ydim=0.002, xdim=0.004, jaw_L=0.009610624558489989, line_idx=110984)\n",
    "\n",
    "\n",
    "ParticleAnalysis(element_type='crystal', n_sigma=42.6, length=0.07, ydim=0.002, xdim=0.004, bend=10.0, jaw_L=0.009611032559017385, line_idx=110987)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b7495392",
   "metadata": {},
   "outputs": [],
   "source": [
    "TCCS_new = ParticleAnalysis(element_type='crystal', n_sigma=7.2, length=0.004, ydim=0.002, xdim=0.035, bend=80.0, align_angle=-2.337255626586841e-05, jaw_L=0.00271382348186472, line_idx=110029)\n",
    "TARGET_new = ParticleAnalysis(element_type='target', n_sigma=42.6, length=0.005, ydim=0.002, xdim=0.004, jaw_L=0.009610624558489989, line_idx=110984)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c89e7122",
   "metadata": {},
   "outputs": [],
   "source": [
    "IR3_IR7_7_2 = ParticleAnalysis(element_type='target', n_sigma=42.6, length=0.005, ydim=0.002, xdim=0.004, jaw_L=0.013086466664922941, line_idx=110984)\n",
    "#IR7_7_2 = ParticleAnalysis(element_type='target', n_sigma=42.6, length=0.005, ydim=0.002, xdim=0.004, jaw_L=0.013086466664922941, line_idx=110984)\n",
    "#test = ParticleAnalysis(element_type='crystal', n_sigma=5.0, length=0.004, ydim=0.002, xdim=0.035, bend=80.0, align_angle=-1.1763616021881982e-05, jaw_L=0.0016912979598174786)\n",
    "\n",
    "IR3_IR7_7_2.load(path_IR3_IR7_7_2)\n",
    "#IR7_7_2.load(path_IR7_7_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c90a1475",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TCCS_new.load(path_new, df_key=\"TCCS_impacts\")\n",
    "TARGET_new.load(path_new, df_key=\"particles\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e1381b50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Impacting particles:  576 / 100000\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1584x720 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "TARGET_new.compute_impact_particles()\n",
    "TARGET_new.impact_part['at_turn'].hist()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a600d5fa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8d6089e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d177a4da",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5aac6348",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffb2661e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "433b7088",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eef7d75a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3b5488e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f145128e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4bc84f70",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fddc71af",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef23b1a0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d692da94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lossmap_B2V.json  TARGET_monitor_B2V_xsuite.pkl  TCCS_monitor_B2V_xsuite.pkl\r\n"
     ]
    }
   ],
   "source": [
    "! ls /eos/home-i04/c/cmaccani/xsuite_sim/old_bjorn_data/Condor/TEST__xsuite_20231208-1614/Job.0/Outputdata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "039343ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "file = '/eos/home-i04/c/cmaccani/xsuite_sim/old_bjorn_data/Condor/TEST__xsuite_20231208-1614/Job.0/Outputdata/TCCS_monitor_B2V_xsuite.pkl'\n",
    "with open(file, 'rb') as f:\n",
    "    loaded_dict = pickle.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6bad6803",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(loaded_dict['data'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0091e208",
   "metadata": {},
   "outputs": [],
   "source": [
    "float_variables = ['zeta', 'x', 'px', 'y', 'py', 'delta']\n",
    "int_variables = ['at_turn', 'particle_id','state', 'parent_particle_id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "68c1058f",
   "metadata": {},
   "outputs": [],
   "source": [
    "variables = float_variables + int_variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "87ff0def",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_particles = 100000\n",
    "num_turns = 200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9897de31",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "var_dict = {}\n",
    "\n",
    "for var in variables:\n",
    "    new_arr = np.array(df[var])\n",
    "    new_arr = new_arr.reshape((num_particles, num_turns))\n",
    "    var_dict[var] = new_arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c03dacaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "del df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e80958ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ParticleAnalysis_1():\n",
    "\n",
    "    def __init__(self, element_type, n_sigma, length, xdim, ydim, jaw_L, bend=None, align_angle = None, beam = 2, plane = 'V', p0c =6.8e12, ):\n",
    "\n",
    "        self.beam = beam\n",
    "        self.plane = plane\n",
    "        self.p0c = p0c\n",
    "        self.element_type = element_type\n",
    "        self.n_sigma = n_sigma\n",
    "        self.length = length\n",
    "        self.xdim = xdim\n",
    "        self.ydim = ydim\n",
    "        self.align_angle = align_angle\n",
    "        self.jaw_L = jaw_L\n",
    "        self.nturns = None\n",
    "        self.npart = None\n",
    "        self.data_dict = None\n",
    "        self.data = None\n",
    "        self.type = None\n",
    "        self.impact_part = None\n",
    "        self.abs_y_low = self.jaw_L\n",
    "        self.abs_y_up = self.jaw_L + self.ydim\n",
    "        self.abs_x_low = -self.xdim/2\n",
    "        self.abs_x_up = self.xdim/2   ### CORRECTED\n",
    "        \n",
    "        if element_type == 'crystal':\n",
    "            self.bend = bend \n",
    "            pot_crit_Si = 21.34 #16 #eV\n",
    "            en_crit_Si = 5.7e9 / 1e-2 #eV/m\n",
    "            #dp_Si = 1.92e-10 #m\n",
    "            xp_crit0 = np.sqrt(2.0*pot_crit_Si/p0c)\n",
    "            Rcrit = p0c/en_crit_Si\n",
    "            self.xp_crit = xp_crit0*(1-Rcrit/bend)\n",
    "            if(self.xp_crit < 0):\n",
    "                print(f\"!!!!!!!!!!!!! \\nERROR: particles at {self.p0c} cannot be channeled if bending is {self.bend} \\n!!!!!!!!!!!!!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "48ef1e9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "TCCS_xsuite = ParticleAnalysis_1(element_type='crystal', n_sigma=5.0, length=0.004, ydim=0.002, xdim=0.035, bend=80.0, align_angle=-1.1763616021881982e-05, jaw_L=0.0016912979598174786, p0c = 1e12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3726ab15",
   "metadata": {},
   "outputs": [],
   "source": [
    "abs_y_low_TCCS = TCCS_xsuite.abs_y_low\n",
    "abs_y_up_TCCS = TCCS_xsuite.abs_y_up\n",
    "abs_x_low_TCCS = TCCS_xsuite.abs_x_low\n",
    "abs_x_up_TCCS = TCCS_xsuite.abs_x_up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b3df203",
   "metadata": {},
   "outputs": [],
   "source": [
    "ydim_TCCS = coll_dict[ TCCS_name]['xdim']\n",
    "xdim_TCCS =  coll_dict[ TCCS_name]['ydim']\n",
    "jaw_L_TCCS = line.elements[idx_TCCS].jaw_L\n",
    "\n",
    "abs_y_low_TCCS = jaw_L_TCCS\n",
    "abs_y_up_TCCS = jaw_L_TCCS + ydim_TCCS\n",
    "abs_x_low_TCCS = -xdim_TCCS/2\n",
    "abs_x_up_TCCS = xdim_TCCS/2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72aa80d6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8e5be8b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "        impact_part_dict = {}\n",
    "        for key in var_dict.keys():\n",
    "            impact_part_dict[key] = []\n",
    "\n",
    "        for part in range(num_particles):\n",
    "            for turn in range(num_turns):\n",
    "                if var_dict['state'][part, turn] > 0 and var_dict['x'][part, turn] > abs_x_low_TCCS and var_dict['x'][part, turn] < abs_x_up_TCCS and var_dict['y'][part, turn]> abs_y_low_TCCS and var_dict['y'][part, turn] < abs_y_up_TCCS:\n",
    "                    for key in var_dict.keys():\n",
    "                        impact_part_dict[key].append(var_dict[key][part, turn])\n",
    "        impact_part_df = pd.DataFrame(impact_part_dict) \n",
    "        \n",
    "        impact_part_df.rename(columns={'state': 'this_state'}, inplace=True)\n",
    "        impact_part_df.rename(columns={'at_turn': 'this_turn'}, inplace=True)\n",
    "        impact_part_df = pd.merge(impact_part_df, df_part[['at_element', 'state', 'at_turn', 'particle_id']], on='particle_id', how='left')\n",
    "        \n",
    "        impact_part_df[float_variables] = impact_part_df[float_variables].astype('float32')\n",
    "        impact_part_df[int_variables] = impact_part_df[int_variables].astype('int32')\n",
    "        impact_part_df['this_turn'] = impact_part_df['this_turn'].astype('int32')\n",
    "        impact_part_df['this_state'] = impact_part_df['this_state'].astype('int32')\n",
    "\n",
    "        impact_part_df.to_hdf(Path(f'particles_B.h5'), key='TCCS_impacts', format='table', mode='a',\n",
    "                  complevel=9, complib='blosc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b0a17ad2",
   "metadata": {},
   "outputs": [],
   "source": [
    "drop_list = ['chi', 'charge_ratio', 'pdg_id', 'rvv', 'rpp', '_rng_s1', '_rng_s2', '_rng_s3', '_rng_s4', 'weight', 'ptau', 'q0', 'beta0', 'mass0', 'start_tracking_at_element', 's']\n",
    "float_variables = ['zeta', 'x', 'px', 'y', 'py', 'delta', 'gamma0', 'p0c']\n",
    "int_variables = ['at_turn', 'particle_id', 'at_element', 'state', 'parent_particle_id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "9dafef18",
   "metadata": {},
   "outputs": [],
   "source": [
    "variables = float_variables + int_variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "e9c07c65",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "list.remove(x): x not in list",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_563/179014810.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mvariables\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'at_element'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m: list.remove(x): x not in list"
     ]
    }
   ],
   "source": [
    "variables.remove('at_element')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "dfbf3ca4",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "list.remove(x): x not in list",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_563/2196428017.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m(\u001b[0m\u001b[0mfloat_variables\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mint_variables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'at_element'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m: list.remove(x): x not in list"
     ]
    }
   ],
   "source": [
    "(float_variables + int_variables).remove('at_element')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "4bab3fd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "float_variables = ['zeta', 'x', 'px', 'y', 'py', 'delta', 'gamma0', 'p0c']\n",
    "int_variables = ['at_turn', 'particle_id', 'at_element', 'state', 'parent_particle_id']\n",
    "\n",
    "# Concatenate the lists\n",
    "variables = float_variables + int_variables\n",
    "\n",
    "# Remove the 'at_element' element\n",
    "variables.remove('at_element')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "3c5f2495",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['zeta',\n",
       " 'x',\n",
       " 'px',\n",
       " 'y',\n",
       " 'py',\n",
       " 'delta',\n",
       " 'gamma0',\n",
       " 'p0c',\n",
       " 'at_turn',\n",
       " 'particle_id',\n",
       " 'state',\n",
       " 'parent_particle_id']"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "3f046f2e",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (3605734791.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndentationError\u001b[0m                          Traceback (most recent call last)",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_104a_swan/x86_64-centos7-gcc11-opt/lib/python3.9/site-packages/IPython/core/compilerop.py\u001b[0m in \u001b[0;36mast_parse\u001b[0;34m(self, source, filename, symbol)\u001b[0m\n\u001b[1;32m     99\u001b[0m         \u001b[0mArguments\u001b[0m \u001b[0mare\u001b[0m \u001b[0mexactly\u001b[0m \u001b[0mthe\u001b[0m \u001b[0msame\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mast\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32min\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mstandard\u001b[0m \u001b[0mlibrary\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m         and are passed to the built-in compile function.\"\"\"\n\u001b[0;32m--> 101\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mcompile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msource\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msymbol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mPyCF_ONLY_AST\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    102\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mreset_compiler_flags\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndentationError\u001b[0m: unexpected indent (3605734791.py, line 3)"
     ]
    }
   ],
   "source": [
    " var_dict = {}\n",
    "\n",
    "for var in variables:\n",
    "    new_arr = np.array(df[var])\n",
    "    new_arr = new_arr.reshape((num_particles, num_turns))\n",
    "    var_dict[var] = new_arr   \n",
    "del df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52d13568",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06fd5c9e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "633f966b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "159bd87b",
   "metadata": {},
   "outputs": [],
   "source": [
    "impact_part_dict = {}\n",
    "\n",
    "#x, y, px, py, ids, turn_id, part_id_turn = [],[],[],[],[],[],[]#np.empty((0,)), np.empty((0,)), np.empty((0,)), np.empty((0,)), np.empty((0,)), np.empty((0,)), np.empty((0,))\n",
    "\n",
    "\n",
    "for key in var_dict.keys():\n",
    "    impact_part_dict[key] = []\n",
    "\n",
    "for part in range(100):   #for part in range(num_particles):\n",
    "    for turn in range(num_turns):\n",
    "        if var_dict['state'][part, turn] > 0 and var_dict['x'][part, turn] > abs_x_low_TCCS and var_dict['x'][part, turn] < abs_x_up_TCCS and var_dict['y'][part, turn]> abs_y_low_TCCS and var_dict['y'][part, turn] < abs_y_up_TCCS:\n",
    "            for key in var_dict.keys():\n",
    "                impact_part_dict[key].append(var_dict[key][part, turn])\n",
    "\n",
    "#part_dict = {\"id\": ids, \"turn_id\": turn_id, \"x\": x, \"y\": y, \"px\":px, \"py\":py}\n",
    "impact_part_df = pd.DataFrame(impact_part_dict)      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8f44e60",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94a4ff8d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cec8d9e5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f41b677c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9389eb41",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_part = TARGET_new.data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "f6c42780",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>zeta</th>\n",
       "      <th>x</th>\n",
       "      <th>px</th>\n",
       "      <th>y</th>\n",
       "      <th>py</th>\n",
       "      <th>delta</th>\n",
       "      <th>at_turn</th>\n",
       "      <th>particle_id</th>\n",
       "      <th>state</th>\n",
       "      <th>parent_particle_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000232</td>\n",
       "      <td>-0.000019</td>\n",
       "      <td>-8.914454e-07</td>\n",
       "      <td>0.003515</td>\n",
       "      <td>-3.589741e-05</td>\n",
       "      <td>-7.982058e-06</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000084</td>\n",
       "      <td>-0.000010</td>\n",
       "      <td>-1.840356e-07</td>\n",
       "      <td>0.002950</td>\n",
       "      <td>-3.415082e-05</td>\n",
       "      <td>-1.590662e-06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000066</td>\n",
       "      <td>-0.000015</td>\n",
       "      <td>-6.052825e-07</td>\n",
       "      <td>0.003312</td>\n",
       "      <td>-3.526835e-05</td>\n",
       "      <td>-8.177970e-07</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.000042</td>\n",
       "      <td>0.000041</td>\n",
       "      <td>6.820197e-07</td>\n",
       "      <td>0.001801</td>\n",
       "      <td>4.797173e-06</td>\n",
       "      <td>-9.276438e-07</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000069</td>\n",
       "      <td>-0.000015</td>\n",
       "      <td>-8.520024e-07</td>\n",
       "      <td>0.002821</td>\n",
       "      <td>-3.376234e-05</td>\n",
       "      <td>-9.210257e-07</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>0.000421</td>\n",
       "      <td>0.000136</td>\n",
       "      <td>6.493452e-06</td>\n",
       "      <td>0.002459</td>\n",
       "      <td>-3.256023e-05</td>\n",
       "      <td>-1.636226e-05</td>\n",
       "      <td>2</td>\n",
       "      <td>97</td>\n",
       "      <td>1</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>0.000939</td>\n",
       "      <td>-0.000320</td>\n",
       "      <td>-7.774338e-07</td>\n",
       "      <td>0.003378</td>\n",
       "      <td>-3.538228e-05</td>\n",
       "      <td>-1.613684e-05</td>\n",
       "      <td>5</td>\n",
       "      <td>97</td>\n",
       "      <td>1</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171</th>\n",
       "      <td>0.000192</td>\n",
       "      <td>0.000340</td>\n",
       "      <td>3.476783e-06</td>\n",
       "      <td>0.002303</td>\n",
       "      <td>5.202036e-07</td>\n",
       "      <td>-1.210589e-05</td>\n",
       "      <td>1</td>\n",
       "      <td>98</td>\n",
       "      <td>1</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>0.000333</td>\n",
       "      <td>-0.000076</td>\n",
       "      <td>-5.362554e-06</td>\n",
       "      <td>0.002397</td>\n",
       "      <td>-3.252293e-05</td>\n",
       "      <td>-1.207436e-05</td>\n",
       "      <td>2</td>\n",
       "      <td>98</td>\n",
       "      <td>1</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>173</th>\n",
       "      <td>0.000130</td>\n",
       "      <td>-0.000147</td>\n",
       "      <td>-8.398823e-06</td>\n",
       "      <td>0.003031</td>\n",
       "      <td>-3.455289e-05</td>\n",
       "      <td>-3.207794e-06</td>\n",
       "      <td>2</td>\n",
       "      <td>99</td>\n",
       "      <td>1</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>174 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         zeta         x            px         y            py         delta  \\\n",
       "0    0.000232 -0.000019 -8.914454e-07  0.003515 -3.589741e-05 -7.982058e-06   \n",
       "1    0.000084 -0.000010 -1.840356e-07  0.002950 -3.415082e-05 -1.590662e-06   \n",
       "2    0.000066 -0.000015 -6.052825e-07  0.003312 -3.526835e-05 -8.177970e-07   \n",
       "3    0.000042  0.000041  6.820197e-07  0.001801  4.797173e-06 -9.276438e-07   \n",
       "4    0.000069 -0.000015 -8.520024e-07  0.002821 -3.376234e-05 -9.210257e-07   \n",
       "..        ...       ...           ...       ...           ...           ...   \n",
       "169  0.000421  0.000136  6.493452e-06  0.002459 -3.256023e-05 -1.636226e-05   \n",
       "170  0.000939 -0.000320 -7.774338e-07  0.003378 -3.538228e-05 -1.613684e-05   \n",
       "171  0.000192  0.000340  3.476783e-06  0.002303  5.202036e-07 -1.210589e-05   \n",
       "172  0.000333 -0.000076 -5.362554e-06  0.002397 -3.252293e-05 -1.207436e-05   \n",
       "173  0.000130 -0.000147 -8.398823e-06  0.003031 -3.455289e-05 -3.207794e-06   \n",
       "\n",
       "     at_turn  particle_id  state  parent_particle_id  \n",
       "0          2            0      1                   0  \n",
       "1          2            1      1                   1  \n",
       "2          2            2      1                   2  \n",
       "3          1            4      1                   4  \n",
       "4          2            4      1                   4  \n",
       "..       ...          ...    ...                 ...  \n",
       "169        2           97      1                  97  \n",
       "170        5           97      1                  97  \n",
       "171        1           98      1                  98  \n",
       "172        2           98      1                  98  \n",
       "173        2           99      1                  99  \n",
       "\n",
       "[174 rows x 10 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "impact_part_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88fbdc64",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "67cd9de4",
   "metadata": {},
   "outputs": [],
   "source": [
    "impact_part_df.rename(columns={'state': 'this_state'}, inplace=True)\n",
    "impact_part_df.rename(columns={'at_turn': 'this_turn'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "6a9a2426",
   "metadata": {},
   "outputs": [],
   "source": [
    "impact_part_df = pd.merge(impact_part_df, df_part[['at_element', 'state', 'at_turn', 'particle_id']], on='particle_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "76e5678e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>zeta</th>\n",
       "      <th>x</th>\n",
       "      <th>px</th>\n",
       "      <th>y</th>\n",
       "      <th>py</th>\n",
       "      <th>delta</th>\n",
       "      <th>this_turn</th>\n",
       "      <th>particle_id</th>\n",
       "      <th>this_state</th>\n",
       "      <th>parent_particle_id</th>\n",
       "      <th>at_element</th>\n",
       "      <th>state</th>\n",
       "      <th>at_turn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000232</td>\n",
       "      <td>-0.000019</td>\n",
       "      <td>-8.914454e-07</td>\n",
       "      <td>0.003515</td>\n",
       "      <td>-3.589741e-05</td>\n",
       "      <td>-7.982058e-06</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000084</td>\n",
       "      <td>-0.000010</td>\n",
       "      <td>-1.840356e-07</td>\n",
       "      <td>0.002950</td>\n",
       "      <td>-3.415082e-05</td>\n",
       "      <td>-1.590662e-06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35613</td>\n",
       "      <td>-333</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000066</td>\n",
       "      <td>-0.000015</td>\n",
       "      <td>-6.052825e-07</td>\n",
       "      <td>0.003312</td>\n",
       "      <td>-3.526835e-05</td>\n",
       "      <td>-8.177970e-07</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>36876</td>\n",
       "      <td>-333</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.000042</td>\n",
       "      <td>0.000041</td>\n",
       "      <td>6.820197e-07</td>\n",
       "      <td>0.001801</td>\n",
       "      <td>4.797173e-06</td>\n",
       "      <td>-9.276438e-07</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000069</td>\n",
       "      <td>-0.000015</td>\n",
       "      <td>-8.520024e-07</td>\n",
       "      <td>0.002821</td>\n",
       "      <td>-3.376234e-05</td>\n",
       "      <td>-9.210257e-07</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>0.000421</td>\n",
       "      <td>0.000136</td>\n",
       "      <td>6.493452e-06</td>\n",
       "      <td>0.002459</td>\n",
       "      <td>-3.256023e-05</td>\n",
       "      <td>-1.636226e-05</td>\n",
       "      <td>2</td>\n",
       "      <td>97</td>\n",
       "      <td>1</td>\n",
       "      <td>97</td>\n",
       "      <td>35613</td>\n",
       "      <td>-333</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>0.000939</td>\n",
       "      <td>-0.000320</td>\n",
       "      <td>-7.774338e-07</td>\n",
       "      <td>0.003378</td>\n",
       "      <td>-3.538228e-05</td>\n",
       "      <td>-1.613684e-05</td>\n",
       "      <td>5</td>\n",
       "      <td>97</td>\n",
       "      <td>1</td>\n",
       "      <td>97</td>\n",
       "      <td>35613</td>\n",
       "      <td>-333</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171</th>\n",
       "      <td>0.000192</td>\n",
       "      <td>0.000340</td>\n",
       "      <td>3.476783e-06</td>\n",
       "      <td>0.002303</td>\n",
       "      <td>5.202036e-07</td>\n",
       "      <td>-1.210589e-05</td>\n",
       "      <td>1</td>\n",
       "      <td>98</td>\n",
       "      <td>1</td>\n",
       "      <td>98</td>\n",
       "      <td>35613</td>\n",
       "      <td>-333</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>0.000333</td>\n",
       "      <td>-0.000076</td>\n",
       "      <td>-5.362554e-06</td>\n",
       "      <td>0.002397</td>\n",
       "      <td>-3.252293e-05</td>\n",
       "      <td>-1.207436e-05</td>\n",
       "      <td>2</td>\n",
       "      <td>98</td>\n",
       "      <td>1</td>\n",
       "      <td>98</td>\n",
       "      <td>35613</td>\n",
       "      <td>-333</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>173</th>\n",
       "      <td>0.000130</td>\n",
       "      <td>-0.000147</td>\n",
       "      <td>-8.398823e-06</td>\n",
       "      <td>0.003031</td>\n",
       "      <td>-3.455289e-05</td>\n",
       "      <td>-3.207794e-06</td>\n",
       "      <td>2</td>\n",
       "      <td>99</td>\n",
       "      <td>1</td>\n",
       "      <td>99</td>\n",
       "      <td>35613</td>\n",
       "      <td>-333</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>174 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         zeta         x            px         y            py         delta  \\\n",
       "0    0.000232 -0.000019 -8.914454e-07  0.003515 -3.589741e-05 -7.982058e-06   \n",
       "1    0.000084 -0.000010 -1.840356e-07  0.002950 -3.415082e-05 -1.590662e-06   \n",
       "2    0.000066 -0.000015 -6.052825e-07  0.003312 -3.526835e-05 -8.177970e-07   \n",
       "3    0.000042  0.000041  6.820197e-07  0.001801  4.797173e-06 -9.276438e-07   \n",
       "4    0.000069 -0.000015 -8.520024e-07  0.002821 -3.376234e-05 -9.210257e-07   \n",
       "..        ...       ...           ...       ...           ...           ...   \n",
       "169  0.000421  0.000136  6.493452e-06  0.002459 -3.256023e-05 -1.636226e-05   \n",
       "170  0.000939 -0.000320 -7.774338e-07  0.003378 -3.538228e-05 -1.613684e-05   \n",
       "171  0.000192  0.000340  3.476783e-06  0.002303  5.202036e-07 -1.210589e-05   \n",
       "172  0.000333 -0.000076 -5.362554e-06  0.002397 -3.252293e-05 -1.207436e-05   \n",
       "173  0.000130 -0.000147 -8.398823e-06  0.003031 -3.455289e-05 -3.207794e-06   \n",
       "\n",
       "     this_turn  particle_id  this_state  parent_particle_id  at_element  \\\n",
       "0            2            0           1                   0           0   \n",
       "1            2            1           1                   1       35613   \n",
       "2            2            2           1                   2       36876   \n",
       "3            1            4           1                   4           0   \n",
       "4            2            4           1                   4           0   \n",
       "..         ...          ...         ...                 ...         ...   \n",
       "169          2           97           1                  97       35613   \n",
       "170          5           97           1                  97       35613   \n",
       "171          1           98           1                  98       35613   \n",
       "172          2           98           1                  98       35613   \n",
       "173          2           99           1                  99       35613   \n",
       "\n",
       "     state  at_turn  \n",
       "0        1      200  \n",
       "1     -333       56  \n",
       "2     -333       11  \n",
       "3        1      200  \n",
       "4        1      200  \n",
       "..     ...      ...  \n",
       "169   -333       28  \n",
       "170   -333       28  \n",
       "171   -333        0  \n",
       "172   -333        0  \n",
       "173   -333        0  \n",
       "\n",
       "[174 rows x 13 columns]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "impact_part_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "c3c174c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['start_tracking_at_element', 's', 'zeta', 'particle_id', 'at_element',\n",
       "       'at_turn', 'state', 'parent_particle_id', 'x', 'y', 'px', 'py', 'delta',\n",
       "       'p0c', 'gamma0'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IR3_IR7_7_2.data.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "c35d7ab8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['zeta', 'x', 'px', 'y', 'py', 'delta', 'this_turn', 'particle_id',\n",
       "       'this_state', 'parent_particle_id', 'at_element', 'state', 'at_turn'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "impact_part_df.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a154003",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59263691",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae81e583",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "203f025f",
   "metadata": {},
   "source": [
    "688822"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "cc23cfb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_distributions(x, y, px, py, **kwargs):\n",
    "\n",
    "        fig1 = plt.figure( figsize=(22, 10))\n",
    "        ax1 = fig1.add_subplot(2,3,1)\n",
    "        ax1.hist(x, bins=100)\n",
    "        ax1.set_xlabel('x [mm]')\n",
    "        ax1.set_ylabel(\"\")\n",
    "        ax1.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "        ax2 = fig1.add_subplot(2,3,2)\n",
    "        ax2.hist(y, bins=100) \n",
    "        ax2.set_xlabel('y [mm]')\n",
    "        ax2.set_ylabel('')\n",
    "        \n",
    "        ax2.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax2.set_title(f'Total particles: {len(x)}')\n",
    "\n",
    "        ax3 = fig1.add_subplot(2,3,3)\n",
    "        h = ax3.hist2d(x, y, bins=100, norm=matplotlib.colors.LogNorm())#,  vmin = 1, vmax = 1e6, range = ([-40e-6, 40e-6], [-40e-6,40e-6])) \n",
    "        ax3.set_xlabel(r'x [mm]')\n",
    "        #ax3.set_ylim(0,0.008)\n",
    "        ax3.set_ylabel(r'y [mm]')\n",
    "        ax3.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax3.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.yticks()[0]])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        axins = inset_axes(ax3, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "        fig1.colorbar(h[3], cax=axins, orientation='vertical', label='Count (log scale)')\n",
    "        ax3.grid(linestyle=':')\n",
    "\n",
    "        ax12 = fig1.add_subplot(2,3,4)\n",
    "        ax12.hist(px, bins=100)\n",
    "        ax12.set_xlabel(r'px [$\\mu$rad]')\n",
    "        ax12.set_ylabel(\"\")\n",
    "        \n",
    "        ax12.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "\n",
    "        ax22 = fig1.add_subplot(2,3,5)\n",
    "        ax22.hist(py, bins=100) \n",
    "        ax22.set_xlabel(r'py [$\\mu$rad]')\n",
    "        ax22.set_ylabel('')\n",
    "        ax22.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "    \n",
    "\n",
    "        ax32 = fig1.add_subplot(2,3,6)\n",
    "        h2 = ax32.hist2d(px, py, bins=100, norm=matplotlib.colors.LogNorm())  #,, norm=matplotlib.colors.LogNorm() range = ([-40e-6, 40e-6], [-40e-6,40e-6])\n",
    "        ax32.set_xlabel(r'px [$\\mu$rad]')\n",
    "        ax32.set_ylabel(r'py [$\\mu$rad]')\n",
    "        ax32.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "        ax32.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.yticks()[0]])\n",
    "        axins_2 = inset_axes(ax32, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "        fig1.colorbar(h2[3], cax=axins_2, orientation='vertical', label='Count (log scale)')\n",
    "        ax32.grid(linestyle=':')\n",
    "\n",
    "        if \"log\" in kwargs and kwargs['log'] == True:  \n",
    "            ax22.set_yscale(\"log\")\n",
    "            ax2.set_yscale(\"log\")\n",
    "            ax12.set_yscale(\"log\")\n",
    "            ax1.set_yscale(\"log\")\n",
    "\n",
    "\n",
    "        #fig1.suptitle('plot')\n",
    "        plt.show()\n",
    "        #return fig1, [ax1,ax2,ax3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4c8a7941",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1584x720 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_distributions(impact_part_df['x'], impact_part_df['y'], impact_part_df['px'], impact_part_df['py'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ff67bdb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
