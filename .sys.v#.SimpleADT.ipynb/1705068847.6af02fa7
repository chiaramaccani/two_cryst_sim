{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f5bda1da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Packages pyspark or cern.nxcals are not installed. Data retrieval from NXCALS is not possible.\n",
      " If you are on SWAN and did not expect this warning, then restart and load the 'NXCals Pro' software stack.\n",
      "No pytransport functionality\n",
      "No pytransport functionality\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import os\n",
    "import subprocess\n",
    "\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import yaml\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as patches\n",
    "import pandas as pd\n",
    "\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "import lossmaps as lm\n",
    "import xobjects as xo\n",
    "\n",
    "import xtrack as xt\n",
    "import xcoll as xc\n",
    "\n",
    "import lossmaps as lm\n",
    "from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n",
    "\n",
    "import xarray as xr\n",
    "\n",
    "import json\n",
    "\n",
    "import xtrack as xt\n",
    "import xpart as xp\n",
    "import xobjects as xo\n",
    "\n",
    "\n",
    "import pickle \n",
    "import h5py\n",
    "import io\n",
    "import scipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5a4f8edc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.28/06\n"
     ]
    }
   ],
   "source": [
    "import ROOT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "140ac29a",
   "metadata": {},
   "outputs": [],
   "source": [
    "class SimpleADT(xt.BeamElement):\n",
    "    _xofields = {\n",
    "        \"angular_kick\": xo.Float64,\n",
    "        \"seed\": xo.Int64,\n",
    "        \"set_seed\": xo.Int64,\n",
    "        \"plane\": xo.Int64,\n",
    "    }\n",
    "\n",
    "    isthick = False\n",
    "    behaves_like_drift = False\n",
    "\n",
    "    _extra_c_sources = [\n",
    "        '''\n",
    "        #ifndef XTRACK_SIMPLEADT_H\n",
    "        #define XTRACK_SIMPLEADT_H\n",
    "\n",
    "        #include <math.h>\n",
    "        #include <string.h>\n",
    "        #include <stdio.h>\n",
    "        #include <stdlib.h>\n",
    "        #include <time.h>\n",
    "\n",
    "        /*gpufun*/\n",
    "        void SimpleADT_track_local_particle(SimpleADTData el, LocalParticle* part0){\n",
    "            \n",
    "\n",
    "            float angular_kick = SimpleADTData_get_angular_kick(el);\n",
    "            int seed = SimpleADTData_get_seed(el);\n",
    "            int set_seed = SimpleADTData_get_set_seed(el);\n",
    "            //char* plane = SimpleADTData_getp_plane(el);\n",
    "            int plane = SimpleADTData_get_plane(el);\n",
    "            \n",
    "            if(set_seed!=0){\n",
    "                srand(seed);\n",
    "            }else{\n",
    "                srand(time(NULL));\n",
    "            }\n",
    "                    \n",
    "            \n",
    "            //start_per_particle_block (part0->part)\n",
    "                /*\n",
    "                if(strcmp(plane, \"H\") == 0){\n",
    "                    float px = LocalParticle_get_px(part);\n",
    "                    float kick = ((float)rand() / RAND_MAX) * 2*angular_kick - angular_kick;\n",
    "                    LocalParticle_set_px(part, px + kick);\n",
    "                }else if(strcmp(plane, \"V\") == 0){\n",
    "                    float py = LocalParticle_get_py(part);\n",
    "                    float kick = ((float)rand() / RAND_MAX) * 2*angular_kick - angular_kick;\n",
    "                    LocalParticle_set_py(part, py + kick);    \n",
    "                }\n",
    "                */\n",
    "                \n",
    "                \n",
    "                if(plane==0){\n",
    "                    float px = LocalParticle_get_px(part);\n",
    "                    float kick = ((float)rand() / RAND_MAX) * 2*angular_kick - angular_kick;\n",
    "                    LocalParticle_set_px(part, px + kick);\n",
    "                }else if(plane==1){\n",
    "                    float py = LocalParticle_get_py(part);\n",
    "                    float kick = ((float)rand() / RAND_MAX) * 2*angular_kick - angular_kick;\n",
    "                    LocalParticle_set_py(part, py + kick); \n",
    "                }\n",
    "                \n",
    "            //end_per_particle_block\n",
    "        }\n",
    "\n",
    "        #endif /* XTRACK_SIMPLEADT_H */\n",
    "        '''\n",
    "    ]\n",
    "\n",
    "    def __init__(self,  angular_kick = 10e-9,\n",
    "                        seed = 1234,\n",
    "                        set_seed = 1,\n",
    "                        plane = 'V',\n",
    "                       **kwargs):\n",
    "        \n",
    "        if plane == 'H':\n",
    "            plane_int = 0\n",
    "        elif plane == 'V':\n",
    "            plane_int = 1\n",
    "        else: \n",
    "            print('Error!! Insert \"V\" or \"H\" as plane')\n",
    "            \n",
    "        if '_xobject' not in kwargs:\n",
    "            kwargs.setdefault('angular_kick', angular_kick)\n",
    "            kwargs.setdefault('seed', seed)\n",
    "            kwargs.setdefault('set_seed', set_seed)\n",
    "            kwargs.setdefault('plane', plane_int)\n",
    "\n",
    "        super().__init__(**kwargs)\n",
    "\n",
    "    has_backtrack = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbcab290",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Compiling ContextCpu kernels...\n"
     ]
    }
   ],
   "source": [
    "adt = SimpleADT(angular_kick = 50e-6, plane='V')\n",
    "p0c_ft = 6.8e12\n",
    "drift_length = 200\n",
    "drift =  xt.Drift(length=drift_length)\n",
    "\n",
    "line = xt.Line(elements=[adt, drift], element_names=[\"TCCS\", \"drift\"])\n",
    "line.build_tracker(_context=xo.ContextCpu(omp_num_threads=6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d62362d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot(x, y, px, py, tit=''):\n",
    "    fig1 = plt.figure(figsize=(22, 10))\n",
    "    ax1 = fig1.add_subplot(2,3,1)\n",
    "    ax1.hist(x, bins=100)\n",
    "    ax1.set_xlabel('x [mm]')\n",
    "    ax1.set_ylabel(\"\")\n",
    "    ax1.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "    ax2 = fig1.add_subplot(2,3,2)\n",
    "    ax2.hist(y, bins=100) \n",
    "    ax2.set_xlabel('y [mm]')\n",
    "    ax2.set_ylabel('')\n",
    "\n",
    "    ax2.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "    ax3 = fig1.add_subplot(2,3,3)\n",
    "    h = ax3.hist2d(x, y, bins=100, norm=matplotlib.colors.LogNorm())#,  vmin = 1, vmax = 1e6, range = ([-40e-6, 40e-6], [-40e-6,40e-6])) \n",
    "    ax3.set_xlabel(r'x [mm]')\n",
    "    #ax3.set_ylim(0,0.008)\n",
    "    ax3.set_ylabel(r'y [mm]')\n",
    "    ax3.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.xticks()[0]])\n",
    "    ax3.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e3:.{2}f}\" for x_tick in plt.yticks()[0]])\n",
    "\n",
    "    axins = inset_axes(ax3, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "    fig1.colorbar(h[3], cax=axins, orientation='vertical', label='Count (log scale)')\n",
    "    ax3.grid(linestyle=':')\n",
    "\n",
    "    ax12 = fig1.add_subplot(2,3,4)\n",
    "    ax12.hist(px, bins=100)\n",
    "    ax12.set_xlabel(r'px [$\\mu$rad]')\n",
    "    ax12.set_ylabel(\"\")   \n",
    "    ax12.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "\n",
    "    ax22 = fig1.add_subplot(2,3,5)\n",
    "    ax22.hist(py, bins=100) \n",
    "    ax22.set_xlabel(r'py [$\\mu$rad]')\n",
    "    ax22.set_ylabel('')\n",
    "    ax22.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "\n",
    "    ax32 = fig1.add_subplot(2,3,6)\n",
    "    h2 = ax32.hist2d(px, py, bins=100, norm=matplotlib.colors.LogNorm())  #,, norm=matplotlib.colors.LogNorm() range = ([-40e-6, 40e-6], [-40e-6,40e-6])\n",
    "    ax32.set_xlabel(r'px [$\\mu$rad]')\n",
    "    ax32.set_ylabel(r'py [$\\mu$rad]')\n",
    "    ax32.set_xticks(ticks=plt.xticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.xticks()[0]])\n",
    "    ax32.set_yticks(ticks=plt.yticks()[0], labels=[f\"{x_tick*1e6:.{1}f}\" for x_tick in plt.yticks()[0]])\n",
    "    axins_2 = inset_axes(ax32, height=\"100%\",  width=\"5%\", loc='right', borderpad=-6 )\n",
    "    fig1.colorbar(h2[3], cax=axins_2, orientation='vertical', label='Count (log scale)')\n",
    "    ax32.grid(linestyle=':')\n",
    "    \n",
    "    fig1.suptitle(tit)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb228627",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_part = 10000000\n",
    "\n",
    "x = np.random.uniform(-0.001, 0.001, n_part)\n",
    "px = np.zeros(n_part)\n",
    "y = np.random.uniform(0.0, 0.002, n_part)\n",
    "py = np.random.normal(0.0, 1e-6, n_part)\n",
    "\n",
    "part = xp.Particles(x=x, \n",
    "                    px=px, \n",
    "                    y=y, \n",
    "                    py=py, \n",
    "                    p0c=p0c_ft)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55cf8049",
   "metadata": {},
   "outputs": [],
   "source": [
    "plot(part.x, part.y, part.px, part.py, tit=\"Turn 0\")\n",
    "line.track(part, num_turns=1)\n",
    "plot(part.x, part.y, part.px, part.py, tit=\"Turn 1\")\n",
    "line.track(part, num_turns=1)\n",
    "plot(part.x, part.y, part.px, part.py, tit=\"Turn 2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e10e76c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54222a76",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "647dda0a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
